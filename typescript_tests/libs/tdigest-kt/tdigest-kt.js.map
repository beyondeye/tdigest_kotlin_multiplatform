{"version":3,"file":"tdigest-kt.js","sources":["collections/Collections.kt","kotlin/math.kt","../../../../../src/commonMain/kotlin/com/tdunning/math/stats/AVLTreeDigest.kt","generated/_ArraysJs.kt","../../../../../src/commonMain/kotlin/com.basicio/BinaryInput.kt","../../../../../src/commonMain/kotlin/com.basicio/BinaryOutput.kt","../../../../../src/commonMain/kotlin/com/tdunning/math/stats/AbstractTDigest.kt","../../../../../src/commonMain/kotlin/com/tdunning/math/stats/AVLGroupTree.kt","../../../../../src/commonMain/kotlin/com/tdunning/math/stats/Centroid.kt","../../../../../src/commonMain/kotlin/com/tdunning/math/stats/Dist.kt","../../../../../src/commonMain/kotlin/com/tdunning/math/stats/IntAVLTree.kt","../../../../../src/jsMain/kotlin/com.tdunning.math.stats/UtilsJS.kt","../../../../../src/commonMain/kotlin/com/tdunning/math/stats/MergingDigest.kt","../../../../../src/commonMain/kotlin/com/tdunning/math/stats/ScaleFunction.kt","../../../../../src/commonMain/kotlin/com/tdunning/math/stats/Sort.kt","../../../../../src/commonMain/kotlin/com/tdunning/math/stats/TDigest.kt","../../../../../src/commonMain/kotlin/com/tdunning/math/stats/Utils.kt","../../../../../src/commonMain/kotlin/sample/Sample.kt","../../../../../src/jsMain/kotlin/com.basicio/BinaryInputJS.kt","../../../../../src/jsMain/kotlin/com.basicio/BinaryOutputJS.kt","../../../../../src/jsMain/kotlin/sample/SampleJs.kt"],"sourcesContent":["/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n",null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"names":[],"mappings":";;;;;;;;;;uBAmFA,+C;eC0RA,I;;;;;;;;;;;;;;;;;;;;WChV8B,gB;;;;;;;;;;;;;;;;;;;;kBCgoB9B,mC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCCjpBI,Y;IACI,OAAU,oBAAc,OAAF,CAAE,CAAjB,GAA2B,KAA3B,GAAsC,I;EACjD,C;;;;;;;;gDCAA,a;IACI,uBAAa,CAAH,GAAM,CAAN,GAAa,CAAvB,C;EACJ,C;;;;;;ECOJ,2B;IA2CI,uC;IA3C6B,kB;IAC7B,mBAEmB,OAAO,CAAP,C;IACnB,6BAA2B,K;G;;SAA3B,Y;MAAA,iC;K;SAAA,uB;MAAA,wC;K;;4CAKA,Y;IAII,mBAAc,I;IACd,OAAO,I;EACX,C;wCAEA,a;IAMI,uBAAI,CAAJ,EAAO,CAAP,C;EACJ,C;6CAEA,iB;IAEqB,UAMA,M;IAPjB,UNuCgD,gB;IMtC/B,OAAA,KAAM,YAAN,W;IAAjB,OAAiB,cAAjB,C;MAAiB,0B;MACb,GAAI,WAAI,QAAJ,C;;IAIJ,QAAJ,GAAI,EAAQ,gBAAR,C;IACa,uB;IAAjB,OAAiB,gBAAjB,C;MAAiB,8B;MACb,iBAAI,UAAS,OAAb,EAAqB,UAAS,QAA9B,EAAuC,UAAvC,C;;EAER,C;qDAEA,oB;IACI,OAAO,gBAAS,IAAT,EAAe,EAAf,EAAmB,gBAAnB,C;EACX,C;EAEA,qC;IAAA,yC;G;gEAEI,0B;IAMW,Q;IAAA,IAAI,MAAM,EAAV,C;MACH,oCAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,EAAlC,C;;;MAEA,oCAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,EAAlC,C;;IAHJ,W;EAKJ,C;gEAEA,0B;IAQI,SAAS,MAAM,EAAf,C;IACA,QAAQ,CAAC,KAAK,EAAL,GAAU,KAAK,EAAhB,KAAuB,KAAK,EAA5B,C;IACW,QLyR8B,MAAW,KKzRjB,CLyRiB,EKzRd,ELyRc,C;IKzR5D,OLkSiD,MAAW,KKlSrC,ELkSqC,EAAO,CAAP,C;EKjShE,C;4DAEA,qB;IACI,OAAO,CAAC,IAAI,EAAL,KAAY,KAAK,EAAjB,C;EACX,C;uDACA,kB;IACI,UAAQ,C;IACR,QAAQ,C;IACR,OAAO,MAAI,CAAJ,IAAS,MAAI,GAApB,C;MACI,QAA+B,OAAtB,MAAS,MAAS,GAAI,C;MAC/B,GAAI,mBAAU,CAAV,C;MACJ,MAAI,GAAE,KAAK,C;MACX,a;MACA,IAAI,KAAK,CAAT,C;QACI,MAAM,2BAAsB,2BAAtB,C;;;IAGd,GAAI,mBAAY,OAAF,GAAE,CAAZ,C;EACR,C;uDAEA,e;IACI,QAAQ,GAAe,W;IACvB,QAAQ,MAAS,C;IACjB,YAAY,C;IACZ,OAAO,KAAM,GAAN,MAAc,CAArB,C;MACI,IAAI,QAAQ,EAAZ,C;QACI,MAAM,2BAAsB,2BAAtB,C;;MAEV,IAAI,GAAe,W;MACnB,SAAK,KAAM,GAAN,KAAe,KAApB,K;MACA,gBAAS,CAAT,I;;IAEJ,OAAO,C;EACX,C;yDAEA,mE;IAmBI,YAAY,YAAY,a;IACxB,qBAAqB,CAAC,YAAY,KAAb,IAAsB,K;IAC3C,iBAAiB,CAAC,QAAQ,aAAT,IAA0B,K;IAC3C,OAAO,eAAe,cAAf,GAAgC,WAAW,U;EACtD,C;;;;;;;EApFJ,iD;IAAA,gD;MAAA,+B;;IAAA,yC;G;;;;;;EC3CyB,8B;IAAY,sB;MAAA,SAAkB,K;IAAS,6B;IAIhE,kBACiC,C;IACjC,eAAyB,C;IACzB,cAAyC,I;IAEzC,mBAAsC,I;IACtC,gBAAgC,I;IAChC,eAAkD,I;IAClD,0BAA0C,I;IAC1C,kB;IAYI,uD;IAgDA,mBAAY,iBAAY,WAAK,WAAjB,C;IACZ,gBAAS,eAAS,WAAK,WAAd,C;IACT,0BAAmB,eAAS,WAAK,WAAd,C;IACnB,IAAI,MAAJ,C;MACI,YAAY,gBAAkC,WAAK,WAAvC,O;MACZ,eAAa,K;;G;oCA/DrB,Y;IAK2B,UACH,M;IAFpB,SAAO,oB;IACP,EAAG,gBAAO,wBAAa,6DAAb,OAAP,C;IACH,EAAG,gBAAO,qBAAU,gEAAV,OAAP,C;IACH,OAAO,EAAG,W;EACd,C;;SA+DQ,Y;MAAQ,OAAQ,WAAK,O;IAAO,C;;wCAEpC,gB;IAII,OAAO,WAAK,cAAK,IAAL,C;EAChB,C;wCAEA,gB;IAII,OAAO,WAAK,cAAK,IAAL,C;EAChB,C;wCAEA,gB;IAII,OAAO,gCAAY,IAAZ,C;EACX,C;yCAEA,gB;IAII,OAAO,6BAAS,IAAT,C;EACX,C;wCAEA,gB;IAII,OAAW,oBAAJ,GAAmB,IAAnB,GAA6B,4BAAQ,IAAR,C;EACxC,C;uCAEA,iC;IAII,kBAAgB,Q;IAChB,eAAa,K;IACb,cAAY,I;IACZ,WAAK,M;EACT,C;uCAEA,oB;IACI,iBAAI,QAAS,OAAb,EAAqB,QAAS,QAA9B,EAAuC,QAAS,OAAhD,C;IACA,OAAO,I;EACX,C;0CAEA,qD;IAII,IAAI,aAAY,gCAAY,IAAZ,CAAZ,IAAiC,YAArC,C;MAEI,gCAAY,IAAZ,IAAoB,Q;MACpB,6BAAS,IAAT,IAAiB,K;MACjB,IAAI,oBAAJ,C;QACI,4BAAQ,IAAR,IAAgB,I;;;;MAIpB,kBAAgB,Q;MAChB,eAAa,K;MACb,cAAY,I;MACZ,WAAK,gBAAO,IAAP,C;;EAEb,C;0CAEA,gB;IACI,WAAK,gBAAO,IAAP,C;EACT,C;yCAEA,oB;IAII,YAAY,kCAAW,I;IACvB,WAAW,WAAK,O;IAChB,OAAO,SAAQ,kCAAW,IAA1B,C;MACI,UAAmB,iBAAT,QAAS,EAAU,kBAAK,IAAL,CAAV,C;MACnB,IAAI,OAAO,CAAX,C;QACI,OAAO,WAAK,cAAK,IAAL,C;;;QAEZ,QAAQ,I;QACR,OAAO,WAAK,eAAM,IAAN,C;;;IAGpB,OAAO,K;EACX,C;4CAEA,e;IAKI,YAAU,G;IACV,YAAY,kCAAW,I;IACvB,WAAW,WAAK,O;IAChB,OAAO,SAAQ,kCAAW,IAA1B,C;MACI,WAAW,WAAK,cAAK,IAAL,C;MAChB,gBAAyC,oBAAzB,uCAAmB,IAAnB,CAAyB,C;MACzC,IAAI,0BAAa,KAAb,MAAJ,C;QACI,QAAQ,I;QACR,uBAAO,kCAAY,mBAAM,IAAN,CAAZ,EAAP,C;QACA,OAAO,WAAK,eAAM,IAAN,C;;;QAEZ,OAAO,WAAK,cAAK,IAAL,C;;;IAGpB,OAAO,K;EACX,C;iCAEA,Y;IAII,OAAO,WAAK,eAAM,WAAK,OAAX,C;EAChB,C;gCAEA,Y;IAII,OAAO,WAAK,cAAK,WAAK,OAAV,C;EAChB,C;2CAEA,gB;IAKI,WAAW,WAAK,cAAK,IAAL,C;IAChB,UAAmC,oBAAzB,uCAAmB,IAAnB,CAAyB,C;IACnC,QAAQ,I;IACR,QAAQ,WAAK,gBAAO,IAAP,C;IACb,OAAO,MAAK,kCAAW,IAAvB,C;MACI,IAAI,MAAK,WAAK,eAAM,CAAN,CAAd,C;QACI,YAAY,WAAK,cAAK,CAAL,C;QACjB,cAAiD,oBAAzC,6BAAS,CAAT,IAAc,uCAAmB,KAAnB,CAAd,IAAyC,CAAjD,C;;MAEJ,IAAI,C;MACJ,IAAI,WAAK,gBAAO,CAAP,C;;IAEb,OAAO,G;EACX,C;oCAEA,Y;IACI,OAAO,gBAAS,YAAT,C;EACX,C;EAGW,mF;IAAA,0C;IAEH,gBAAe,iB;G;0DAEf,Y;IACI,OAAO,kBAAY,kCAAW,I;EAClC,C;uDAEA,Y;IAIkB,Q;IAHd,WAAW,gBAAS,oCAAK,aAAL,CAAT,EAAyB,qCAAM,aAAN,CAAzB,C;IACX,WAAW,oCAAK,aAAL,C;IACX,IAAI,YAAJ,C;MACc,sB;MAAV,OAAU,cAAV,C;QAAU,mB;QACN,IAAK,oBAAW,CAAX,C;;;IAGb,gBAAW,6BAAK,cAAK,aAAL,C;IAChB,OAAO,I;EACX,C;yDAEA,Y;IACI,MAAM,mCAA8B,oBAA9B,C;EACV,C;;;;;sCAvBR,qB;IACI,+D;EAyBJ,C;+BAEA,Y;IAII,OAAO,uCAAmB,WAAK,OAAxB,C;EACX,C;wCAEA,Y;IACI,WAAK,sBAAa,WAAK,OAAlB,C;EACT,C;2CAEA,Y;IACI,uBAAgB,WAAK,OAArB,C;EACJ,C;6CAEA,gB;IACI,SACI,uCAAmB,IAAnB,OAA4B,6BAAS,IAAT,IAAiB,uCAAmB,WAAK,cAAK,IAAL,CAAxB,CAAjB,GAAuD,uCAAmB,WAAK,eACvG,IADuG,CAAxB,CAAvD,IAA5B,CADJ,C;IAKA,IAAI,SAAQ,kCAAW,IAAvB,C;MACI,uBAAgB,WAAK,cAAK,IAAL,CAArB,C;MACA,uBAAgB,WAAK,eAAM,IAAN,CAArB,C;;EAER,C;EA5QW,6E;IAAA,0C;IAAS,sC;G;6DAEZ,uB;IACU,+CAAO,WAAP,C;IACN,qCAAwB,OAAZ,iDAAY,EAAO,WAAP,C;IACxB,kCAAkB,SAAT,8CAAS,EAAO,WAAP,C;IAClB,4CAAsC,SAAnB,wDAAmB,EAAO,WAAP,C;IACtC,IAAI,sCAAJ,C;MACI,iCAAgB,SAAR,6CAAQ,EAAO,WAAP,C;;EAExB,C;4DAEA,gB;IAEI,MAAM,sC;EACV,C;2DAEA,gB;IACI,kDAAY,IAAZ,IAAoB,iC;IACpB,+CAAS,IAAT,IAAiB,8B;IACjB,IAAI,sCAAJ,C;MACI,IAAI,qCAAJ,C;QACI,IAAI,mCAAS,CAAb,C;UACI,MAAM,8B;;QAEV,gCPgBgC,gB;QOfhC,4CAAO,WAAI,iCAAJ,C;;MAEX,8CAAQ,IAAR,IAAgB,4C;;EAExB,C;8DAEA,gB;IACW,Q;IAAA,IAAI,oCAAW,kDAAY,IAAZ,CAAf,C;MACH,S;;;MAGA,Q;;IAJJ,W;EAMJ,C;oEAEA,gB;IACU,sDAAc,IAAd,C;IACN,yDAAmB,IAAnB,IACI,+CAAS,IAAT,IAAiB,yDAAmB,kBAAK,IAAL,CAAnB,CAAjB,GAAkD,yDAAmB,mBAAM,IAAN,CAAnB,CAAlD,I;EACR,C;;;;;;;;;;;IL+iBR,qC;IAlnBA,sB;IACA,qB;IAEA,iB;;qCAeA,Y;IAIW,gB;IAAP,OAAO,uFAAqB,E;EAChC,C;0CACA,Y;IACI,IAAI,6BAAU,KAAV,KAAkB,CAAtB,C;MACI,MAAM,2BAAsB,uDAAtB,C;;IAEV,iBAAU,iBAAa,IAAb,C;IACV,OAAa,kD;EACjB,C;0CAEA,Y;IACI,OAAO,6BAAU,K;EACrB,C;wCAEA,sB;IACI,IAAI,MAAK,IAAK,OAAV,IAAoB,MAAK,IAAK,QAAlC,C;MACI,MAAM,+B;;IAEV,iBAAI,CAAJ,EAAO,CAAP,EAAU,IAAK,OAAf,C;EACJ,C;8CAEA,gB;IACc,Q;IAAV,iBAAI,CAAJ,EAAO,CAAP,EAAU,6EAAV,C;EACJ,C;wCAEA,kB;IACkB,UAEO,M;IAFP,wB;IAAd,OAAc,cAAd,C;MAAc,uB;MACY,QAAI,Q;MAAJ,QAAS,KAAM,I;MAAf,aDyS2B,MAAW,KAAI,CAAJ,EAAO,CAAP,C;MCzSL,UAAI,Q;MAAJ,UAAS,KAAM,I;MAAtE,+BDkTiD,MAAW,KAAI,GAAJ,EAAO,GAAP,CClT5D,C;MACiB,SAAA,KAAM,YAAN,W;MAAjB,OAAiB,gBAAjB,C;QAAiB,4B;QACb,iBAAI,QAAS,OAAb,EAAqB,QAAS,QAA9B,EAA2C,gBAAJ,GAAiB,QAAS,OAA1B,GAAsC,IAA7E,C;;;EAGZ,C;wCAEA,sB;IACI,wBAAW,CAAX,C;IACA,IAAI,IAAI,QAAR,C;MACI,WAAM,C;;IAEV,IAAI,IAAI,QAAR,C;MACI,WAAM,C;;IAEV,gBAAY,6BAAU,eAAM,CAAN,CAAtB,C;IACA,IAAI,YAAS,kCAAW,IAAxB,C;MACI,UAAQ,6BAAU,Q;;IAGtB,IAAI,YAAS,kCAAW,IAAxB,C;MACI,SAAS,6BAAU,KAAV,KAAkB,CAA3B,C;MACA,6BAAU,aAAI,CAAJ,EAAO,CAAP,EAAU,IAAV,C;MACV,eAAU,oBAAF,CAAE,C;;;MAEV,sBAAkB,wCAAO,UAAzB,C;MACA,uBAAmB,kCAAW,IAA9B,C;MAEI,eAAe,O;MACf,OAAO,aAAY,kCAAW,IAA9B,C;QACY,UAAI,6BAAU,cAAK,QAAL,CAAV,I;QAAZ,QDoP8B,MAAW,KAAI,GAAJ,C;QCnPzC,IAAI,IAAI,aAAR,C;UACI,UAAQ,Q;UACR,gBAAc,C;;cACX,IAAI,IAAI,aAAR,C;UAEH,iBAAe,Q;UACf,K;;QAEJ,WAAW,6BAAU,cAAK,QAAL,C;;MAI7B,cAAc,kCAAW,I;MACzB,QAAQ,G;MACR,iBAAe,O;MACf,OAAO,eAAY,cAAnB,C;QACa,wB;QAAe,UAAI,6BAAU,cAAK,UAAL,CAAV,GAA2B,C;QAAvD,SAAS,SDmOyB,MAAW,KAAI,GAAJ,CCnO7C,C;QACA,SAAS,6BAAU,iBAAQ,UAAR,CAAkB,WAA5B,GAAyC,YAAzC,W;QACT,SAAS,KAAK,6BAA0B,eAAV,UAAU,CAA1B,GAAuC,YAAvC,W;qBACN,Y;QAAoB,QAAI,UAAM,aAAI,EAAJ,EAAQ,kBAAR,EAAqB,YAAM,WAA3B,C;QAAV,QAAkD,UAAM,aAAI,EAAJ,EAAQ,kBAAR,EAAqB,YAAM,WAA3B,C;QAApF,QAAQ,SDuPqC,MAAW,KAAI,CAAJ,EAAO,CAAP,C;QCnPxD,IAAI,CAAA,6BAAU,eAAM,UAAN,CAAV,GAA4B,CAA5B,SAAiC,CAArC,C;UACI,S;UACA,IAAI,gBAAI,aAAJ,GAAmB,IAAI,CAA3B,C;YACI,UAAU,U;;;QAGlB,aAAW,6BAAU,cAAK,UAAL,C;;MAGzB,IAAI,YAAW,kCAAW,IAA1B,C;QACI,6BAAU,aAAI,CAAJ,EAAO,CAAP,EAAU,IAAV,C;;;QAIV,eAAe,6BAAU,cAAK,OAAL,C;QACzB,YAAY,6BAAU,eAAM,OAAN,C;QACtB,QAAQ,6BAAU,cAAK,OAAL,C;QAClB,IAAI,SAAJ,C;UACI,IAAI,MAAK,CAAT,C;YACI,CAAE,WAAI,CAAJ,C;;;YAEF,CAAE,gBAAO,mBAAP,C;;;QAGV,WAAW,gEACP,QADO,EAED,KAFC,EAGP,CAHO,EAIL,CAJK,C;QAMX,gBAAS,CAAT,I;QACA,6BAAU,gBAAO,OAAP,EAAgB,QAAhB,EAA0B,KAA1B,EAAiC,CAAjC,EAAoC,KAApC,C;;MAEd,gCAAW,oBAAF,CAAE,CAAX,C;MAEA,IAAI,6BAAU,KAAV,GAAiB,KAAK,kBAA1B,C;QAEI,e;;;EAGZ,C;iDACA,8B;IAMI,wBAAW,QAAX,C;IACA,wBAAW,QAAX,C;IACA,IAAG,WAAS,QAAT,IAAe,WAAS,QAA3B,C;MACI,MAAM,gCAAyB,uBAAzB,C;;IAEV,QAAM,Q;IACN,gBAAY,6BAAU,eAAM,CAAN,CAAtB,C;IACA,IAAI,YAAS,kCAAW,IAAxB,C;MACI,UAAQ,6BAAU,Q;;IAGtB,sBAAkB,wCAAO,UAAzB,C;IACA,uBAAmB,kCAAW,IAA9B,C;IAEI,eAAe,O;IACf,OAAO,aAAY,kCAAW,IAA9B,C;MACY,UAAI,6BAAU,cAAK,QAAL,CAAV,I;MAAZ,QD6JkC,MAAW,KAAI,GAAJ,C;MC5J7C,IAAI,IAAI,aAAR,C;QACI,UAAQ,Q;QACR,gBAAc,C;;YACX,IAAI,IAAI,aAAR,C;QAEH,iBAAe,Q;QACf,K;;MAEJ,WAAW,6BAAU,cAAK,QAAL,C;;IAI7B,cAAc,kCAAW,I;IACzB,QAAQ,G;IACR,iBAAe,O;IACf,OAAO,eAAY,cAAnB,C;MACa,wB;MAAe,UAAI,6BAAU,cAAK,UAAL,CAAV,GAA2B,C;MAAvD,SAAS,SD4I6B,MAAW,KAAI,GAAJ,CC5IjD,C;MAIA,S;MACA,IAAI,gBAAI,aAAJ,GAAmB,IAAI,CAA3B,C;QACI,UAAU,U;;MAEd,aAAW,6BAAU,cAAK,UAAL,C;;IAEzB,SAAS,YAAW,kCAAW,IAA/B,C;IAKA,uBAAuB,6BAAU,cAAK,OAAL,C;IACjC,oBAAoB,6BAAU,eAAM,OAAN,C;IAC9B,gBAAgB,6BAAU,cAAK,OAAL,C;IAC1B,IAAI,iBAAJ,C;MACI,SAAU,cAAO,CAAP,C;;IAEd,IAAG,gBAAc,CAAjB,C;MACI,mBAAmB,gEACf,gBADe,EAED,aAFC,EAGf,CAHe,EAIf,CAAC,GAJc,C;MAMnB,gCAAiB,EAAjB,I;MACA,6BAAU,gBAAO,OAAP,EAAgB,gBAAhB,EAAkC,aAAlC,EAAiD,SAAjD,EAA4D,KAA5D,C;;;MAEV,SAAS,kBAAa,GAAtB,C;MACA,6BAAU,gBAAO,OAAP,C;;IAId,oDAAS,EAAT,E;IAEA,IAAI,6BAAU,KAAV,GAAiB,KAAK,kBAA1B,C;MAEI,e;;IAIJ,iBAAI,QAAJ,EAAa,CAAb,EAAe,IAAf,C;EACJ,C;qCAEA,Y;IACI,IAAI,6BAAU,KAAV,IAAkB,CAAtB,C;MACI,M;;IAGJ,SAAS,G;IACT,SAAS,0BAAQ,UAAM,aAAI,KAAK,YAAL,WAAJ,EAAgB,kBAAhB,EAA6B,YAAM,WAAnC,C;IACvB,WAAW,6BAAU,Q;IACrB,SAAS,6BAAU,eAAM,IAAN,C;IACnB,SAAS,KAAK,6BAAU,eAAM,IAAN,C;IAExB,SAAS,C;IACT,M;IACA,OAAO,SAAQ,kCAAW,IAA1B,C;MACI,YAAY,6BAAU,cAAK,IAAL,C;MACtB,OAAO,UAAS,kCAAW,IAA3B,C;QACI,KAAK,6BAAU,eAAM,KAAN,C;QACf,KAAK,0BAAQ,UAAM,aAAI,CAAC,KAAK,EAAN,IAAY,YAAZ,WAAJ,EAAuB,kBAAvB,EAAoC,YAAM,WAA1C,C;QACf,gBAAK,EAAL,I;QAAsB,QAAI,E;QAA9B,IAAI,ODkGyC,MAAW,KAAI,CAAJ,EClGtB,EDkGsB,CClGxD,C;UACI,K;;;UAEA,WAAW,gEACP,6BAAU,cAAK,IAAL,CADH,EAEJ,EAFI,EAGP,6BAAU,cAAK,KAAL,CAHH,EAIJ,EAJI,C;UAMX,SAAS,6BAAU,cAAK,IAAL,C;UACnB,SAAS,6BAAU,cAAK,KAAL,C;UACnB,IAAI,cAAc,UAAlB,C;YACI,EAAG,gBAAO,EAAP,C;;UAEP,6BAAU,gBAAO,IAAP,EAAa,IAAb,EAAmB,KAAK,EAAL,IAAnB,EAA4B,EAA5B,EAAgC,IAAhC,C;UAEV,UAAU,6BAAU,cAAK,KAAL,C;UACpB,6BAAU,gBAAO,KAAP,C;UACV,QAAQ,G;UACR,MAAS,E;UACT,UAAM,EAAN,I;;;MAGR,OAAO,K;MACP,IAAI,SAAQ,kCAAW,IAAvB,C;QACI,KAAK,E;QACL,KAAK,0BAAQ,UAAM,aAAI,KAAK,YAAL,WAAJ,EAAgB,kBAAhB,EAA6B,YAAM,WAAnC,C;QACnB,KAAK,E;QACL,KAAK,KAAK,E;;;EAGtB,C;iCAEA,Y;IAOI,OAAO,Y;EACX,C;wCAEA,a;IAKI,aAAa,c;IACb,IAAI,qBAAS,KAAT,KAAiB,CAArB,C;MACI,OAAO,wCAAO,I;;UACX,IAAI,MAAO,KAAP,KAAe,CAAnB,C;MACH,OAAW,IAAI,MAAO,cAAK,MAAO,QAAZ,CAAf,GACH,GADG,GAEE,IAAI,MAAO,cAAK,MAAO,QAAZ,CAAf,GACD,GADC,GAGD,G;;;MAEJ,IAAI,IAAI,QAAR,C;QACI,OAAO,G;;YACJ,IAAI,MAAK,QAAT,C;QACH,OAAO,MAAM,WAAN,W;;MAEX,SAAS,IAAI,QAAb,C;MAEA,IAAI,IAAI,QAAR,C;QACI,OAAO,G;;YACJ,IAAI,MAAK,QAAT,C;QACH,QAAQ,W;QACR,OAAO,CAAC,eAAI,GAAL,IAAY,CAAZ,W;;MAEX,SAAS,IAAI,QAAb,C;MAEA,YAAY,MAAO,Q;MACnB,gBAAgB,MAAO,cAAK,KAAL,C;MACvB,IAAI,IAAI,QAAJ,IAAW,IAAI,SAAnB,C;QACI,OAAO,uBAAgB,MAAhB,EAAwB,CAAxB,EAA2B,KAA3B,EAAkC,SAAlC,EAA6C,QAA7C,C;;MAGX,WAAW,MAAO,O;MAClB,eAAe,MAAO,cAAK,IAAL,C;MACtB,IAAI,IAAI,QAAJ,IAAW,IAAI,QAAnB,C;QACI,OAAO,IAAI,uBAAgB,MAAhB,EAAwB,CAAxB,EAA2B,IAA3B,EAAiC,QAAjC,EAA2C,QAA3C,C;;MAEf,SAAS,MAAO,KAAP,IAAe,CAAxB,C;MACA,SAAS,KAAK,SAAd,C;MACA,SAAS,KAAK,QAAd,C;MAGA,SAAS,MAAO,W;MAChB,QAAQ,EAAG,O;MACX,YAAY,CAAE,O;MACd,cAAc,CAAU,Q;MAExB,IAAI,MAAK,KAAT,C;QACI,OAAO,UAAU,GAAV,GAAgB,WAAO,W;;MAElC,SAAS,IAAI,KAAb,C;MAGA,QAAQ,EAAG,O;MACX,YAAY,CAAE,O;MACd,cAAc,CAAU,Q;MAExB,SAAS,SAAS,KAAlB,C;MAEA,kBAAkB,G;MAGlB,OAAO,UAAU,CAAjB,C;QACI,SAAS,IAAI,KAAb,C;QACA,IAAI,MAAK,KAAT,C;UACI,SAAS,QAAQ,KAAjB,C;UACA,eAAe,O;UACf,OAAO,EAAG,UAAV,C;YACI,IAAI,EAAG,O;YACP,IAAI,MAAK,CAAE,OAAX,C;cACI,WAAW,CAAU,Q;;;cAErB,K;;;UAGR,OAAO,CAAC,cAAc,OAAd,GAAwB,UAAU,GAAnC,IAA0C,WAA1C,W;;QAEX,SAAS,IAAI,KAAJ,IAAa,IAAI,KAA1B,C;QAEA,IAAI,IAAI,KAAR,C;UAEI,SAAS,QAAQ,KAAjB,C;UACA,IAAI,YAAW,GAAf,C;YAEI,IAAI,YAAW,GAAf,C;cAEI,OAAO,CAAC,cAAc,GAAf,IAAsB,WAAtB,W;;;cAGP,oBAAoB,CAAC,IAAI,KAAL,KAAe,QAAQ,KAAvB,IAAgC,OAAhC,GAA0C,G;cAC9D,OAAO,CAAC,cAAc,GAAd,GAAoB,aAArB,IAAsC,WAAtC,W;;;gBAER,IAAI,YAAW,GAAf,C;YAEH,sBAAoB,CAAC,IAAI,KAAL,KAAe,QAAQ,KAAvB,IAAgC,OAAhC,GAA0C,G;YAE9D,OAAO,CAAC,cAAc,UAAU,GAAxB,GAA8B,eAA/B,IAAgD,WAAhD,W;;;YAGP,sBAAoB,CAAC,IAAI,KAAL,KAAe,QAAQ,KAAvB,KAAiC,UAAU,OAA3C,IAAsD,G;YAC1E,OAAO,CAAC,cAAc,UAAU,GAAxB,GAA8B,eAA/B,IAAgD,WAAhD,W;;;QAGf,eAAe,O;QAEf,SAAS,IAAI,KAAb,C;QAEA,IAAI,EAAG,UAAP,C;UACI,QAAQ,K;UACR,UAAU,O;UAEV,IAAI,EAAG,O;UACP,QAAQ,CAAE,O;UACV,UAAU,CAAU,Q;UAEpB,SAAS,SAAS,KAAlB,C;;;UAEA,UAAU,G;;;MAIlB,MAAM,2BAAsB,sBAAtB,C;;EAEd,C;8CAEA,+C;IAOI,YAAY,MAAO,eAAM,IAAN,C;IACnB,SAAS,QAAQ,CAAjB,C;IACA,IAAI,UAAS,CAAb,C;MAEI,OAAO,MAAM,WAAN,W;;;MAGP,aAAa,QAAQ,GAAR,GAAc,C;MAE3B,oBAAoB,CAAC,eAAe,CAAhB,KAAsB,eAAe,IAArC,IAA6C,M;MAEjE,OAAO,CAAC,gBAAgB,GAAjB,IAAwB,WAAxB,W;;EAEf,C;qCAEA,a;IA4DsB,Q;IAvDlB,IAAI,IAAI,CAAJ,IAAS,IAAI,CAAjB,C;MACI,MAAM,gCAAyB,+BAA4B,CAArD,C;;IAGV,aAAa,c;IACb,IAAI,qBAAS,KAAT,KAAiB,CAArB,C;MAEI,OAAO,wCAAO,I;;UACX,IAAI,MAAO,KAAP,KAAe,CAAnB,C;MAEH,OAAO,MAAO,WAAW,OAAO,O;;IAIpC,YAAY,IAAI,YAAJ,W;IAGZ,IAAI,QAAQ,CAAZ,C;MACI,OAAO,Q;;IAGX,IAAI,SAAS,0CAAQ,CAAR,EAAT,WAAJ,C;MACI,OAAO,Q;;IAGX,kBAAkB,MAAO,Q;IACzB,oBAAoB,MAAO,eAAM,WAAN,C;IAE3B,IAAI,kBAAiB,CAAjB,IAAsB,SAAS,CAAnC,C;MAGI,OAAO,IAAI,MAAO,cAAK,WAAL,CAAX,GAA+B,Q;;IAG1C,IAAI,MAAO,eAAM,MAAO,OAAb,CAAP,KAA+B,CAA/B,IAAoC,QAAQ,0CAAQ,CAAR,EAAR,WAAxC,C;MAEI,OAAO,IAAI,MAAO,cAAK,MAAO,OAAZ,CAAX,GAAiC,Q;;IAM5C,kBAAkB,gBAAgB,G;IAGlC,IAAI,QAAQ,WAAZ,C;MAGI,OAAO,gEACH,QADG,EAEH,cAAc,KAFX,EAGH,MAAO,cAAK,WAAL,CAHJ,EAIH,QAAQ,CAJL,C;;IAOO,OAAA,MAAO,KAAP,GAAc,CAAd,I;IAAlB,aAAU,CAAV,gB;MACI,eAAe,MAAO,cAAK,WAAL,C;MACtB,iBAAiB,MAAO,eAAM,QAAN,C;MAExB,SAAS,CAAC,gBAAgB,UAAhB,IAAD,IAA+B,G;MACxC,IAAI,QAAQ,cAAc,EAA1B,C;QAII,oBAAoB,G;QACpB,qBAAqB,G;QACrB,IAAI,kBAAiB,CAArB,C;UACI,IAAI,QAAQ,cAAc,GAA1B,C;YACI,OAAO,MAAO,cAAK,WAAL,C;;;YAEd,gBAAgB,G;;;QAGxB,IAAI,eAAc,CAAlB,C;UACI,IAAI,SAAS,cAAc,EAAd,GAAmB,GAAhC,C;YACI,OAAO,MAAO,cAAK,QAAL,C;;;YAEd,iBAAiB,G;;;QAIzB,SAAS,gBAAgB,cAAhB,GAAiC,CAA1C,C;QACA,SAAS,KAAK,CAAd,C;QAGA,SAAS,QAAQ,WAAR,GAAsB,a;QAC/B,SAAS,cAAc,EAAd,GAAmB,KAAnB,GAA2B,c;QACpC,OAAO,gEACH,MAAO,cAAK,WAAL,CADJ,EAEH,EAFG,EAGH,MAAO,cAAK,QAAL,CAHJ,EAIH,EAJG,C;;MAOX,eAAe,E;MACf,cAAc,Q;MACd,gBAAgB,U;;IAIpB,SAAS,gBAAgB,CAAzB,C;IACA,SAAS,QAAQ,WAAR,IAAsB,iBAAgB,CAAhB,QAAoB,CAApB,IAAtB,CAAT,C;IACA,SAAS,0BAAQ,WAAR,GAAsB,GAA/B,C;IAEA,WAAS,QAAQ,W;IACjB,WAAS,YAAM,WAAN,GAAmB,GAAnB,GAAyB,K;IAClC,OAAO,gEAAgB,MAAO,cAAK,WAAL,CAAvB,EAA0C,IAA1C,EAA8C,QAA9C,EAAmD,IAAnD,C;EACX,C;sCAEA,Y;IACI,OAAO,6B;EACX,C;wCAEA,Y;IACI,OAAO,kB;EACX,C;qCAEA,Y;IAII,e;IACA,OAAO,MAAK,6BAAU,KAAV,GAAiB,EAAjB,IAAL,K;EACX,C;EASsC,6E;IAAA,4B;MAC9B,gCAAa,SAAb,C;MACA,gBAAI,SAAK,K;MACb,W;IAAA,C;G;0CAVJ,Y;IAKI,YAAY,e;IACZ,cAAQ,CAAR,C;IACA,UAAS,kBAAkB,KAAlB,EAAyB,6CAAzB,C;IAIT,GAAI,U;IACJ,OAAO,K;EACX,C;oCAEA,e;IASqB,UAIA,M;IATjB,GAAI,kBAAS,wDAAT,C;IACJ,GAAI,qBAAY,QAAZ,C;IACJ,GAAI,qBAAY,QAAZ,C;IACJ,GAAI,qBAAoC,kBAApC,C;IACJ,GAAI,kBAAS,6BAAU,KAAnB,C;IACa,+C;IAAjB,OAAiB,cAAjB,C;MAAiB,0B;MACb,GAAI,qBAAY,QAAS,OAArB,C;;IAGS,iD;IAAjB,OAAiB,gBAAjB,C;MAAiB,8B;MACb,GAAI,kBAAS,UAAS,QAAlB,C;;EAEZ,C;yCAEA,e;IAQqB,UAMA,M;IAbjB,GAAI,kBAAS,sDAAT,C;IACJ,GAAI,qBAAY,QAAZ,C;IACJ,GAAI,qBAAY,QAAZ,C;IACJ,GAAI,qBAAY,kBAAZ,C;IACJ,GAAI,kBAAS,6BAAU,KAAnB,C;IAEJ,QAAQ,G;IACS,+C;IAAjB,OAAiB,cAAjB,C;MAAiB,0B;MACb,YAAY,QAAS,OAAT,GAAkB,C;MAC9B,IAAI,QAAS,O;MACb,GAAI,oBAAiB,KAAjB,C;;IAGS,iD;IAAjB,OAAiB,gBAAjB,C;MAAiB,8B;MACb,QAAQ,UAAS,Q;MACjB,uDAAO,GAAP,EAAY,CAAZ,C;;EAER,C;EAEA,mC;IAAA,uC;IAEI,0BAA+B,C;IAC/B,wBAA6B,C;G;gDAE7B,e;IAQI,eAAe,GAAI,U;IACnB,IAAI,aAAY,uBAAhB,C;MACI,UAAU,GAAI,a;MACd,UAAU,GAAI,a;MACd,kBAAkB,GAAI,a;MACtB,QAAQ,mBAAc,WAAd,C;MACR,CAAE,mBAAU,GAAV,EAAe,GAAf,C;MACF,QAAQ,GAAI,U;MACZ,YAAY,iBAAY,CAAZ,C;MACZ,aAAU,CAAV,MAAkB,CAAlB,M;QACI,MAAM,CAAN,IAAW,GAAI,a;;MAEnB,eAAU,CAAV,QAAkB,CAAlB,Q;QACI,CAAE,mBAAI,MAAM,GAAN,CAAJ,EAAc,GAAI,UAAlB,C;;MAEN,OAAO,C;;UACJ,IAAI,aAAY,qBAAhB,C;MACH,YAAU,GAAI,a;MACd,YAAU,GAAI,a;MACd,oBAAkB,GAAI,a;MACtB,UAAQ,mBAAc,aAAd,C;MACR,GAAE,mBAAU,KAAV,EAAe,KAAf,C;MACF,UAAQ,GAAI,U;MACZ,cAAY,iBAAY,GAAZ,C;MACZ,QAAQ,G;MACR,eAAU,CAAV,QAAkB,GAAlB,Q;QACI,YAAY,GAAgB,Y;QAC5B,KAAK,K;QACL,QAAM,GAAN,IAAW,C;;MAGf,eAAU,CAAV,QAAkB,GAAlB,Q;QACI,QAAQ,uDAAO,GAAP,C;QACR,GAAE,mBAAI,QAAM,GAAN,CAAJ,EAAc,CAAd,C;;MAEN,OAAO,G;;;MAEP,MAAM,2BAAsB,yCAAtB,C;;EAEd,C;;;;;;;EApDJ,+C;IAAA,8C;MAAA,6B;;IAAA,uC;G;;;;;;EA7mBA,gD;IAAA,uD;IAQgC,2B;IAdpC,yB;IAeQ,sBAAmB,W;IACnB,kBAAU,iBAAa,KAAb,C;IAVd,Y;G;EMPW,0B;IA2HX,gC;IAvHA,kBAAuB,G;IACvB,eAAoB,C;IAEpB,YAGsB,C;IAEtB,oBAA+C,I;IAG3C,YAAK,8CAAY,2B;IACjB,IAAI,MAAJ,C;MACI,oBRgD4C,gB;;G;+BQxBpD,oB;IACI,YAAU,E;IACV,iBAAI,CAAJ,EAAO,CAAP,C;EACJ,C;mCAEA,gB;IACI,IAAI,yBAAJ,C;MACI,gCAAa,WAAI,CAAJ,C;;IAEjB,8BAAS,CAAT,I;IACA,mBAAY,KAAK,IAAI,eAAT,IAAqB,Y;EACrC,C;4BAEA,Y;IACI,OAAO,e;EACX,C;6BAEA,Y;IACI,OAAO,Y;EACX,C;0BAEA,Y;IACI,OAAO,S;EACX,C;gCAEA,Y;IACI,OAAO,cACC,WADD,YACe,eADf,IAEC,UAFD,YAEc,YAFd,IAGK,oBAAJ,GAAI,C;EAChB,C;gCAEA,Y;IACI,OAAO,S;EACX,C;uCAEA,a;IACI,QAAiB,iBAAT,eAAS,EAAU,CAAE,WAAZ,C;IACjB,IAAI,MAAK,CAAT,C;MACI,IAAI,YAAK,CAAE,KAAP,I;;IAER,OAAO,C;EACX,C;4BAEA,Y;IACI,OAAO,iB;EACX,C;0CAEA,a;IACI,IAAI,yBAAJ,C;MACI,oBR1B4C,gB;;IQ4BhD,gCAAa,WAAI,CAAJ,C;EACjB,C;mCAEA,sB;IAGwB,Q;IAFpB,IAAI,yBAAJ,C;MACI,IAAI,YAAJ,C;QACgB,sB;QAAZ,OAAY,cAAZ,C;UAAY,qB;UACR,gCAAa,WAAI,GAAJ,C;;;;QAGjB,gCAAa,WAAI,CAAJ,C;;;IAGrB,kBAAW,uCAAgB,yBACvB,eADuB,EAEjB,YAFiB,EAGvB,CAHuB,EAIrB,CAJqB,C;IAM3B,8BAAS,CAAT,I;EACJ,C;EAUA,8B;IAAA,kC;IACI,qBAC0B,OAAO,CAAP,C;G;wDAE1B,sB;IACI,QAAQ,aAAS,YAAT,C;IACR,CAAE,aAAI,CAAJ,EAAO,CAAP,EAAU,IAAV,C;IACF,OAAO,C;EACX,C;;;;;;;EARJ,0C;IAAA,yC;MAAA,wB;;IAAA,kC;G;;;;;;EAtGA,iC;IAAA,kD;IAAyB,qBAAK,KAAL,C;IACrB,cAAM,CAAN,EAAS,CAAT,EAAY,8CAAY,2BAAxB,C;IADJ,Y;G;EAIA,sC;IAAA,kD;IAAiC,qBAAK,KAAL,C;IAC7B,cAAM,CAAN,EAAS,CAAT,EAAY,8CAAY,2BAAxB,C;IADJ,Y;G;EAIA,0C;IAAA,kD;IAA0C,qBAAK,KAAL,C;IACtC,cAAM,CAAN,EAAS,CAAT,EAAY,EAAZ,C;IADJ,Y;G;EAIA,+C;IAAA,kD;IAAmD,qBAAK,MAAL,C;IAC/C,cAAM,CAAN,EAAS,CAAT,EAAY,EAAZ,C;IADJ,Y;G;EAIA,4C;IAAA,kD;IAAsE,gBAAK,CAAL,EAAQ,CAAR,Q;IAClE,qBAAa,I;IADjB,Y;G;EC3CJ,gB;IAAA,oB;G;+BAII,mB;IAGc,Q;IAFV,SAAS,C;IACT,SAAS,C;IACT,wBAAU,IAAV,gB;MAAU,QAAA,IAAV,M;MACI,WAAU,IAAI,CAAR,GAAW,CAAX,GAAkB,CAAxB,K;MACA,WAAU,MAAK,CAAT,GAAY,CAAZ,GAAmB,CAAzB,K;;IAEJ,OAAO,CAAC,KAAK,KAAK,GAAX,IAAkB,IAAK,O;EAClC,C;+BAEA,mB;IAGc,Q;IAFV,SAAS,C;IACT,SAAS,C;IACC,sB;IAAV,OAAU,cAAV,C;MAAU,mB;MACN,WAAU,IAAI,CAAR,GAAW,CAAX,GAAkB,CAAxB,K;MACA,WAAU,MAAK,CAAT,GAAY,CAAZ,GAAmB,CAAzB,K;;IAEJ,OAAO,CAAC,KAAK,KAAK,GAAX,IAAkB,IAAK,K;EAClC,C;oCAEA,mB;IACI,QAAQ,IAAK,O;IACb,IAAI,MAAK,CAAT,C;MACI,OAAO,wCAAO,I;;IAElB,YAAY,IAAI,C;IAChB,IAAI,QAAQ,CAAZ,C;MACI,QAAQ,G;;IAEZ,IAAI,SAAQ,IAAI,CAAJ,IAAR,CAAJ,C;MACI,QAAS,CAAO,GAAH,CAAG,I;;IAEI,QAAM,K;IAA9B,OAAO,KAA8B,YRgQO,MAAW,OAAM,CAAN,CQhQlB,CAA9B,C;EACX,C;oCAEA,mB;IACI,QAAQ,IAAK,K;IACb,IAAI,MAAK,CAAT,C;MACI,OAAO,wCAAO,I;;IAElB,YAAY,IAAI,C;IAChB,IAAI,QAAQ,CAAZ,C;MACI,QAAQ,G;;IAEZ,IAAI,SAAQ,IAAI,CAAJ,IAAR,CAAJ,C;MACI,QAAS,CAAO,GAAH,CAAG,I;;IAEI,QAAM,K;IAA9B,OAAO,iBAA8B,YRiPO,MAAW,OAAM,CAAN,CQjPlB,CAA9B,C;EACX,C;;;;;;;EApDJ,4B;IAAA,2B;MAAA,U;;IAAA,oB;G;ECSoC,qC;IAwiBhC,kC;IAxiB4C,+B;MAAA,kBAAuB,E;IAInE,2B;IACA,eAAyB,C;IACzB,oB;IACA,kB;IACA,mB;IACA,mB;IAGI,uBAAgB,8B;IAChB,eAAQ,sC;IACR,gBAAS,eAAS,eAAT,C;IACT,cAAO,eAAS,eAAT,C;IACP,eAAQ,eAAS,eAAT,C;IACR,eAAQ,cAAU,eAAV,C;G;8BAGZ,Y;IAII,OAAO,Y;EACX,C;kCAEA,Y;IAKI,OAAO,aAAO,O;EAClB,C;wCAEA,uB;IAKI,gBAAgB,SAAP,aAAO,EAAQ,WAAR,C;IAChB,cAAY,SAAL,WAAK,EAAQ,WAAR,C;IACZ,eAAc,SAAN,YAAM,EAAQ,WAAR,C;IACd,eAAc,SAAN,YAAM,EAAQ,WAAR,C;EAClB,C;8BAEA,Y;IAII,OAAO,oBAAc,e;EACzB,C;wCAEA,gB;IAII,OAAO,cAAO,IAAP,C;EACX,C;sCAEA,gB;IAII,OAAO,YAAK,IAAL,C;EACX,C;uCAEA,gB;IAII,OAAO,aAAM,IAAN,C;EACX,C;uCAEA,gB;IAII,OAAO,YAAY,CAAN,IAAM,C;EACvB,C;uCAEA,gB;IAII,aAAW,I;IACX,IAAI,WAAQ,sCAAZ,C;MACI,OAAO,sC;;IAEX,OAAO,IAAP,C;MACI,WAAW,kBAAK,MAAL,C;MACX,IAAI,SAAQ,sCAAZ,C;QACI,K;;MAEJ,SAAO,I;;IAEX,OAAO,M;EACX,C;sCAEA,gB;IAII,aAAW,I;IACX,OAAO,IAAP,C;MACI,YAAY,mBAAM,MAAN,C;MACZ,IAAI,UAAS,sCAAb,C;QACI,K;;MAEJ,SAAO,K;;IAEX,OAAO,M;EACX,C;sCAEA,gB;IAII,aAAW,I;IACX,YAAY,mBAAM,MAAN,C;IACZ,IAAI,UAAS,sCAAb,C;MACI,OAAO,mBAAM,KAAN,C;;;MAEP,aAAa,oBAAO,MAAP,C;MACb,OAAO,WAAU,sCAAV,IAAiB,WAAQ,mBAAM,MAAN,CAAhC,C;QACI,SAAO,M;QACP,SAAS,oBAAO,MAAP,C;;MAEb,OAAO,M;;EAEf,C;sCAEA,gB;IAII,aAAW,I;IACX,WAAW,kBAAK,MAAL,C;IACX,IAAI,SAAQ,sCAAZ,C;MACI,OAAO,kBAAK,IAAL,C;;;MAEP,aAAa,oBAAO,MAAP,C;MACb,OAAO,WAAU,sCAAV,IAAiB,WAAQ,kBAAK,MAAL,CAAhC,C;QACI,SAAO,M;QACP,SAAS,oBAAO,MAAP,C;;MAEb,OAAO,M;;EAEf,C;6BAkBA,Y;IAKI,IAAI,iBAAS,sCAAb,C;MACI,eAAQ,oBAAc,kB;MACtB,kBAAK,YAAL,C;MACA,2BAAc,YAAd,C;MACA,OAAO,I;;;MAEP,WAAW,Y;MACX,SAAS,oBAAO,YAAP,MAAiB,sCAA1B,C;MACA,U;MACA,O;;QAEI,MAAM,qBAAQ,IAAR,C;QACN,IAAI,MAAM,CAAV,C;UACI,SAAS,I;UACT,OAAO,kBAAK,IAAL,C;;cACJ,IAAI,MAAM,CAAV,C;UACH,SAAS,I;UACT,OAAO,mBAAM,IAAN,C;;;UAEP,mBAAM,IAAN,C;UACA,OAAO,K;;;MAEN,iBAAQ,sCAAR,C;MAET,OAAO,oBAAc,kB;MACrB,IAAI,QAAQ,eAAZ,C;QACI,oBAAO,oDAAS,OAAO,CAAP,IAAT,CAAP,C;;MAEJ,kBAAK,IAAL,C;MACA,cAAO,IAAP,EAAa,MAAb,C;MACA,IAAI,MAAM,CAAV,C;QACI,YAAK,MAAL,EAAa,IAAb,C;;;QAEA,SAAS,MAAM,CAAf,C;QACA,aAAM,MAAN,EAAc,IAAd,C;;MAGJ,iBAAU,IAAV,C;MAEA,OAAO,I;;EAEf,C;8BAEA,Y;IAII,WAAW,Y;IACX,OAAO,SAAQ,sCAAf,C;MACI,UAAU,qBAAQ,IAAR,C;MACV,IAAI,MAAM,CAAV,C;QACI,OAAO,kBAAK,IAAL,C;;YACJ,IAAI,MAAM,CAAV,C;QACH,OAAO,mBAAM,IAAN,C;;;QAEP,OAAO,I;;;IAGf,OAAO,sC;EACX,C;wCAEA,gB;IAII,WAAW,kBAAK,IAAL,C;IACX,WAAW,kBAAK,IAAL,C;IACX,IAAI,CAAC,SAAQ,sCAAR,IAAe,qBAAQ,IAAR,IAAgB,CAAhC,MAAuC,SAAQ,sCAAR,IAAe,qBAAQ,IAAR,IAAgB,CAAtE,CAAJ,C;MAEI,kBAAK,IAAL,C;MACA,QAAQ,I;MACR,OAAO,MAAK,sCAAZ,C;QACI,2BAAc,CAAd,C;QACA,IAAI,oBAAO,CAAP,C;;;;MAKR,oBAAO,IAAP,C;MACA,U;;EAER,C;wCAEA,gB;IAII,IAAI,SAAQ,sCAAZ,C;MACI,MAAM,+B;;IAEV,IAAI,kBAAK,IAAL,MAAc,sCAAd,IAAqB,mBAAM,IAAN,MAAe,sCAAxC,C;MAEI,WAAW,kBAAK,IAAL,C;MACX,SAAS,SAAQ,sCAAjB,C;MACA,YAAK,IAAL,EAAW,IAAX,C;;IAEJ,SAAS,kBAAK,IAAL,MAAc,sCAAd,IAAqB,mBAAM,IAAN,MAAe,sCAA7C,C;IAEA,aAAa,oBAAO,IAAP,C;IACb,YAAY,kBAAK,IAAL,C;IACZ,IAAI,UAAS,sCAAb,C;MACI,QAAQ,mBAAM,IAAN,C;;IAGZ,IAAI,UAAS,sCAAb,C;MAEI,IAAI,SAAQ,YAAZ,C;QC5SR,IAAI,ED6SiB,gBAAU,CC7S3B,CAAJ,C;UACI,cD4SgC,W;UC3ShC,MAAM,sBAAe,OAAf,C;;QD4SE,eAAQ,sC;;;QAER,IAAI,SAAQ,kBAAK,MAAL,CAAZ,C;UACI,YAAK,MAAL,EAAa,sCAAb,C;;;UAEA,SAAS,SAAQ,mBAAM,MAAN,CAAjB,C;UACA,aAAM,MAAN,EAAc,sCAAd,C;;;;;MAKR,IAAI,SAAQ,YAAZ,C;QACI,SAAS,gBAAU,CAAnB,C;QACA,eAAQ,K;;YACL,IAAI,SAAQ,kBAAK,MAAL,CAAZ,C;QACH,YAAK,MAAL,EAAa,KAAb,C;;;QAEA,SAAS,SAAQ,mBAAM,MAAN,CAAjB,C;QACA,aAAM,MAAN,EAAc,KAAd,C;;MAEJ,cAAO,KAAP,EAAc,MAAd,C;;IAGJ,eAAQ,IAAR,C;IACA,iBAAU,MAAV,C;EACJ,C;mCAEA,gB;IACI,YAAK,IAAL,EAAW,sCAAX,C;IACA,aAAM,IAAN,EAAY,sCAAZ,C;IACA,cAAO,IAAP,EAAa,sCAAb,C;IACA,oBAAc,iBAAQ,IAAR,C;EAClB,C;gCAEA,wB;IACI,cAAc,oBAAO,KAAP,C;IACd,cAAc,oBAAO,KAAP,C;IACd,IAAI,YAAW,sCAAf,C;MACI,IAAI,UAAS,kBAAK,OAAL,CAAb,C;QACI,YAAK,OAAL,EAAc,KAAd,C;;;QAEA,SAAS,UAAS,mBAAM,OAAN,CAAlB,C;QACA,aAAM,OAAN,EAAe,KAAf,C;;;;MAGJ,SAAS,iBAAS,KAAlB,C;MACA,eAAQ,K;;IAEZ,IAAI,YAAW,sCAAf,C;MACI,IAAI,UAAS,kBAAK,OAAL,CAAb,C;QACI,YAAK,OAAL,EAAc,KAAd,C;;;QAEA,SAAS,UAAS,mBAAM,OAAN,CAAlB,C;QACA,aAAM,OAAN,EAAe,KAAf,C;;;;MAGJ,SAAS,iBAAS,KAAlB,C;MACA,eAAQ,K;;IAEZ,cAAO,KAAP,EAAc,OAAd,C;IACA,cAAO,KAAP,EAAc,OAAd,C;IAEA,YAAY,kBAAK,KAAL,C;IACZ,YAAY,kBAAK,KAAL,C;IACZ,YAAK,KAAL,EAAY,KAAZ,C;IACA,IAAI,UAAS,sCAAb,C;MACI,cAAO,KAAP,EAAc,KAAd,C;;IAEJ,YAAK,KAAL,EAAY,KAAZ,C;IACA,IAAI,UAAS,sCAAb,C;MACI,cAAO,KAAP,EAAc,KAAd,C;;IAGJ,aAAa,mBAAM,KAAN,C;IACb,aAAa,mBAAM,KAAN,C;IACb,aAAM,KAAN,EAAa,MAAb,C;IACA,IAAI,WAAU,sCAAd,C;MACI,cAAO,MAAP,EAAe,KAAf,C;;IAEJ,aAAM,KAAN,EAAa,MAAb,C;IACA,IAAI,WAAU,sCAAd,C;MACI,cAAO,MAAP,EAAe,KAAf,C;;IAGJ,aAAa,mBAAM,KAAN,C;IACb,aAAa,mBAAM,KAAN,C;IACb,aAAM,KAAN,EAAa,MAAb,C;IACA,aAAM,KAAN,EAAa,MAAb,C;EACJ,C;yCAEA,gB;IACI,OAAO,mBAAM,kBAAK,IAAL,CAAN,IAAoB,mBAAM,mBAAM,IAAN,CAAN,CAApB,I;EACX,C;qCAEA,gB;IACI,QAAQ,I;IACR,OAAO,MAAK,sCAAZ,C;MACI,QAAQ,oBAAO,CAAP,C;MAER,2BAAc,CAAd,C;MAEA,QAAM,qBAAc,CAAd,CAAN,C;aACI,E;UACI,YAAY,mBAAM,CAAN,C;UACZ,IAAI,qBAAc,KAAd,MAAwB,CAA5B,C;YACI,mBAAY,KAAZ,C;;;UAEJ,kBAAW,CAAX,C;UALJ,K;aAOA,C;UACI,WAAW,kBAAK,CAAL,C;UACX,IAAI,qBAAc,IAAd,MAAuB,EAA3B,C;YACI,kBAAW,IAAX,C;;;UAEJ,mBAAY,CAAZ,C;UALJ,K;aAOA,E;aAAA,C;aAAA,C;UAAA,K;gBAEQ,MAAM,qB;;MAGlB,IAAI,C;;EAEZ,C;+CAEA,gB;IACgC,QAAI,mBAAM,kBAAK,IAAL,CAAN,C;IAAJ,QAAuB,mBAAM,mBAAM,IAAN,CAAN,C;IAAnD,aAAM,IAAN,EAAY,ITslBgC,MAAW,KAAI,CAAJ,EAAO,CAAP,CStlB3C,IAAZ,C;EACJ,C;sCAEA,a;IAEI,QAAQ,mBAAM,CAAN,C;IACR,SAAS,kBAAK,CAAL,C;IACT,aAAM,CAAN,EAAS,EAAT,C;IACA,IAAI,OAAM,sCAAV,C;MACI,cAAO,EAAP,EAAW,CAAX,C;;IAEJ,QAAQ,oBAAO,CAAP,C;IACR,cAAO,CAAP,EAAU,CAAV,C;IACA,IAAI,MAAK,sCAAT,C;MACI,eAAQ,C;;UACL,IAAI,kBAAK,CAAL,MAAW,CAAf,C;MACH,YAAK,CAAL,EAAQ,CAAR,C;;;MAEA,SAAS,mBAAM,CAAN,MAAY,CAArB,C;MACA,aAAM,CAAN,EAAS,CAAT,C;;IAEJ,YAAK,CAAL,EAAQ,CAAR,C;IACA,cAAO,CAAP,EAAU,CAAV,C;IACA,2BAAc,CAAd,C;IACA,2BAAc,oBAAO,CAAP,CAAd,C;EACJ,C;uCAEA,a;IAEI,QAAQ,kBAAK,CAAL,C;IACR,SAAS,mBAAM,CAAN,C;IACT,YAAK,CAAL,EAAQ,EAAR,C;IACA,IAAI,OAAM,sCAAV,C;MACI,cAAO,EAAP,EAAW,CAAX,C;;IAEJ,QAAQ,oBAAO,CAAP,C;IACR,cAAO,CAAP,EAAU,CAAV,C;IACA,IAAI,MAAK,sCAAT,C;MACI,eAAQ,C;;UACL,IAAI,mBAAM,CAAN,MAAY,CAAhB,C;MACH,aAAM,CAAN,EAAS,CAAT,C;;;MAEA,SAAS,kBAAK,CAAL,MAAW,CAApB,C;MACA,YAAK,CAAL,EAAQ,CAAR,C;;IAEJ,aAAM,CAAN,EAAS,CAAT,C;IACA,cAAO,CAAP,EAAU,CAAV,C;IACA,2BAAc,CAAd,C;IACA,2BAAc,oBAAO,CAAP,CAAd,C;EACJ,C;kCAEA,wB;IACI,SAAS,SAAQ,sCAAjB,C;IACA,IAAK,SAAL,CAAY,IAAZ,IAAoB,M;EACxB,C;gCAEA,sB;IACI,SAAS,SAAQ,sCAAjB,C;IACA,IAAK,OAAL,CAAU,IAAV,IAAkB,I;EACtB,C;iCAEA,uB;IACI,SAAS,SAAQ,sCAAjB,C;IACA,IAAK,QAAL,CAAW,IAAX,IAAmB,K;EACvB,C;iCAEA,uB;IACI,SAAS,SAAQ,sCAAjB,C;IACA,SAAS,SAAS,CAAT,IAAc,SAAS,sCAAK,UAArC,C;IACA,IAAK,QAAL,CAAW,IAAX,IAAyB,OAAN,KAAM,C;EAC7B,C;8CAEA,gB;IACI,IAAI,SAAQ,sCAAZ,C;MACI,SAAS,mBAAM,IAAN,MAAe,CAAxB,C;;;MAES,8BAAM,IAAN,C;MAA+B,QAAI,mBAAM,kBAAK,IAAL,CAAN,C;MAAJ,QAAuB,mBAAM,mBAAM,IAAN,CAAN,C;MAA/D,SAAS,UAAe,IT0gBgB,MAAW,KAAI,CAAJ,EAAO,CAAP,CS1gB3B,IAAf,CAAT,C;MACA,SAAqB,IAAI,mBAAM,kBAAK,IAAL,CAAN,IAAoB,mBAAM,mBAAM,IAAN,CAAN,CAApB,IAAJ,CAAZ,IAA2D,CAApE,C;MACA,0BAAa,kBAAK,IAAL,CAAb,C;MACA,0BAAa,mBAAM,IAAN,CAAb,C;;EAER,C;EAKuB,+B;IAInB,mB;IACA,cAAwB,C;IAGpB,eAAQ,eAAS,CAAT,C;IACR,cAAO,C;G;+CAGX,Y;IACI,OAAO,W;EACX,C;8CAEA,Y;IACI,OAAO,aAAM,iCAAN,EAAM,WAAN,C;EACX,C;+CAEA,a;IAKU,Q;IAJN,IAAI,eAAQ,YAAM,OAAlB,C;MACI,gBAAgB,oDAAS,cAAO,CAAP,IAAT,C;MAChB,eAAc,SAAN,YAAM,EAAO,SAAP,C;;IAElB,aAAM,kBAAN,EAAM,0BAAN,UAAgB,C;EACpB,C;;;;;;EAIwB,oC;IAIxB,kBAA4B,C;IAC5B,2B;IAGI,kBAAW,yCAAM,CAAN,I;IACX,uBAAgB,yB;G;uDAGpB,Y;IAIQ,UAHG,M;IAAA,IAAI,oBAAc,eAAd,GAAuB,CAA3B,C;MACW,SAAd,oBAAc,c;;;MAEd,uE;;IAHJ,a;EAKJ,C;uDAEA,gB;IACI,SAAS,OAAO,eAAhB,C;IACA,oBAAc,cAAK,IAAL,C;EAClB,C;oDAEA,Y;IACI,OAAO,kBAAW,oBAAc,eAAzB,GAAkC,CAAlC,I;EACX,C;;;;;;EAIJ,gC;IAAA,oC;IAEI,WAIU,C;G;oDAEV,gB;IAEI,OAAO,QAAO,IAAK,KAAK,CAAjB,K;EACX,C;;;;;;;EAXJ,4C;IAAA,2C;MAAA,0B;;IAAA,oC;G;;;;;;EE9eH,sD;IAowBG,qC;IApwB8B,0B;MAAA,aAAkB,E;IAAI,oB;MAAA,OAAY,E;IAAM,0B;IACtE,oBAAyB,C;IAEzB,4B;IACA,sB;IAEA,sBACgC,C;IAEhC,qBAC0B,G;IAE1B,oB;IAEA,kB;IAGA,cACsD,I;IAEtD,wBAC6B,G;IAE7B,kBAEuB,C;IACvB,wB;IACA,sB;IACA,kBAA0D,I;IAG1D,mB;IAIA,0BACyB,I;IACzB,8BAC6B,I;IAMzB,oBAAkB,W;IAClB,mBAAiB,U;IACjB,aAAW,I;IAWX,IAAI,gBAAc,EAAlB,C;MACI,gBAAc,I;;IAIlB,gBAAgB,G;IAChB,IAAI,oDAAJ,C;MACI,YAAY,I;MACZ,IAAI,gBAAc,EAAlB,C;QAAsB,aAAa,I;;IAIpB,QAAI,IAAI,aAAJ,GAAkB,S;IAAtB,QAAsC,M;IAAzD,SAAqE,YXmOhB,MAAW,KAAI,CAAJ,EAAO,CAAP,CWnOK,C;IAGrE,IAAI,iBAAc,EAAlB,C;MAwBI,eAAa,IAAI,MAAJ,I;;IAIjB,IAAI,iBAAc,IAAI,MAAJ,IAAd,CAAJ,C;MACI,eAAa,IAAI,MAAJ,I;;IAKqC,UAAvB,gBAAa,MAAb,QAAoB,CAApB,I;IAA/B,YXu0B4C,MAAW,KWv0B3B,CXu0B2B,EAAO,GAAP,C;IWt0BvD,IAAI,CAAC,2BAAL,C;MACI,QAAQ,G;;IAKZ,2BAAyB,a;IACM,QAAK,K;IAApC,qBXR2C,MAAW,MAAK,CAAL,CWQnC,GAA0B,wB;IAG7C,IAAI,SAAO,IAAK,cAAL,GAAmB,SAA9B,C;MACuB,UAAK,IAAK,cAAL,GAAmB,S;MAA3C,SAAsD,YX+Ff,MAAW,MAAK,GAAL,CW/FI,C;;IAI1D,IAAI,iBAAc,IAAI,MAAJ,IAAd,CAAJ,C;MACI,eAAa,IAAI,MAAJ,I;;IAGjB,gBAAS,iBAAY,MAAZ,C;IACT,cAAO,iBAAY,MAAZ,C;IAEP,oBAAa,iBAAY,YAAZ,C;IACb,kBAAW,iBAAY,YAAZ,C;IACX,eAAQ,eAAS,YAAT,C;IAER,sBAAe,C;G;;SA5Ff,Y;MAAQ,iB;K;;0CA+FZ,Y;IAIU,kD;IACN,cZzIgD,gB;IY0IhD,kBZ1IgD,gB;IY2IhD,OAAO,I;EACX,C;wCAEA,sB;IACI,WAAI,CAAJ,EAAO,CAAP,EAAU,IAAK,OAAf,C;EACJ,C;8CAEA,gB;IACc,Q;IAAV,WAAI,CAAJ,EAAO,CAAP,EAAU,sEAAV,C;EACJ,C;kCAEA,yB;IAQgB,Q;IAPZ,gBAAc,O;IACd,IAAM,QAAF,CAAE,CAAN,C;MACI,MAAM,gCAAyB,4BAAzB,C;;IAEV,IAAI,oBAAY,iBAAW,OAAX,GAAkB,mBAAlB,GAAiC,CAAjC,IAAZ,CAAJ,C;MACI,uB;;IAEJ,aAAY,sBAAZ,EAAY,8BAAZ,O;IACA,kBAAW,KAAX,IAAsB,C;IACtB,gBAAS,KAAT,IAAkB,C;IAClB,yBAAoB,C;IACpB,IAAI,IAAI,QAAR,C;MACI,WAAM,C;;IAEV,IAAI,IAAI,QAAR,C;MACI,WAAM,C;;IAGV,IAAI,mBAAJ,C;MACI,IAAI,uBAAJ,C;QACI,kBZ3KwC,gB;;MY6K5C,OAAO,8BAAW,KAAX,IAAmB,KAA1B,C;QACI,8BAAW,WZ9K6B,gBY8K7B,C;;MAEf,IAAI,iBAAJ,C;QACI,YAAU,OAAO,CAAP,C;;MAEd,2CAAW,KAAX,CAAkB,gBAAO,SAAP,C;;EAE1B,C;iDACA,8B;IACI,MAAM,wBAAoB,gDAApB,C;EACV,C;kCAGA,6B;IACI,UAAQ,C;IACR,UAAQ,C;IACR,IAAI,GAAE,OAAF,KAAU,GAAE,OAAhB,C;MACI,MAAM,gCAAyB,wBAAzB,C;;IAEV,IAAI,GAAE,OAAF,IAAS,QAAQ,mBAAR,IAAT,CAAJ,C;MAEI,SAAS,iBAAY,QAAQ,mBAAR,IAAZ,C;MACT,mBAAM,mBAAU,GAAV,EAAa,CAAb,EAAgB,EAAhB,EAAoB,CAApB,EAAuB,KAAvB,C;MACN,MAAI,E;MACJ,SAAS,iBAAY,QAAQ,mBAAR,IAAZ,C;MACT,mBAAM,mBAAU,GAAV,EAAa,CAAb,EAAgB,EAAhB,EAAoB,CAApB,EAAuB,KAAvB,C;MACN,MAAI,E;;IAER,YAAY,G;IACZ,aAAU,CAAV,MAAkB,KAAlB,M;MACI,SAAS,IAAE,CAAF,C;;IAEb,aAAM,GAAN,EAAS,GAAT,EAAY,KAAZ,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,KAA/B,EAAsC,KAAtC,EAA6C,kBAA7C,C;EACJ,C;wCAEA,kB;IAKkB,UAcA,MAdA,EAmBe,MAnBf,EAyBW,M;IA7BzB,IAAI,MAAO,KAAP,KAAe,CAAnB,C;MACI,M;;IAEJ,WAAW,mB;IACG,wB;IAAd,OAAc,cAAd,C;MAAc,uB;MACV,KAAM,W;MACN,cAAQ,KAAM,gBAAd,I;;IAGJ,QAAQ,iBAAY,IAAZ,C;IACR,QAAQ,iBAAY,IAAZ,C;IACR,Q;IACA,IAAI,gBAAJ,C;MACI,OZ/N4C,gB;;;MYiO5C,OAAO,I;;IAEX,aAAa,C;IACC,0B;IAAd,OAAc,gBAAd,C;MAAc,2B;MACV,IAAI,qCAAJ,C;QACI,mBAAM,mBAAU,OAAM,OAAhB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,MAA5B,EAAoC,OAAM,eAA1C,C;QACN,mBAAM,mBAAU,OAAM,SAAhB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,MAA9B,EAAsC,OAAM,eAA5C,C;QACN,IAAI,YAAJ,C;UACqB,SAAA,OAAM,YAAN,W;UAAjB,OAAiB,gBAAjB,C;YAAiB,4B;YACb,IAAK,WAAI,cAAA,QAAS,OAAT,CAAJ,C;;;QAGb,kBAAU,OAAM,eAAhB,I;;;QAEiB,SAAA,OAAM,YAAN,W;QAAjB,OAAiB,gBAAjB,C;UAAiB,8B;UACb,EAAE,MAAF,IAAY,UAAS,O;UACrB,EAAE,MAAF,IAAY,UAAiB,Q;UAC7B,IAAI,gBAAJ,C;YACI,SAAS,YAAT,C;YACA,mBAAO,WAAI,cAAA,UAAS,OAAT,CAAJ,C;;UAEX,uB;;;;IAIZ,WAAI,CAAJ,EAAO,CAAP,EAAU,IAAV,EAAgB,IAAhB,C;EACJ,C;6CACA,8B;IAA2B,qB;MAAA,QAAiB,K;IAAO,2B;MAAA,cAAsB,IAAK,c;IAC1E,IAAI,uBAAe,GAAf,IAAsB,0BAAkB,GAA5C,C;MAEI,M;;IAEJ,IAAI,SAAS,wBAAiB,CAA9B,C;MAEI,aACI,eADJ,EACc,iBADd,EAC0B,eAD1B,EACoC,eADpC,EAC8C,YAD9C,EACqD,qBADrD,EAEI,0BAAwB,oBAAa,CAAb,KAAkB,CAF9C,EAEkD,WAFlD,C;MAIA,6C;MACA,kBAAW,C;MACX,wBAAiB,G;MACjB,IAAI,mBAAJ,C;QACI,kBZ3QwC,gB;;;EY+QpD,C;oCAEA,+H;IAY0B,UAiCJ,MAjCI,EAuFJ,M;IA9FlB,sBAAoB,a;IACpB,sBAAoB,a;IACpB,mBAAM,mBAAU,WAAV,EAAgB,CAAhB,EAAmB,YAAnB,EAAiC,eAAjC,EAAgD,mBAAhD,C;IACN,mBAAM,mBAAU,aAAV,EAAkB,CAAlB,EAAqB,cAArB,EAAqC,eAArC,EAAoD,mBAApD,C;IACN,oCAAiB,mBAAjB,I;IAEA,IAAI,oBAAJ,C;MACsB,0B;MAAlB,aAAU,CAAV,gB;QACI,SAAS,mBAAT,C;QACA,YAAa,WAAI,uCAAO,CAAP,CAAJ,C;;MAEjB,cZjS4C,gB;;IYmShD,IAAI,uBAAJ,C;MACI,kBAAgB,eAAS,eAAT,C;;IAEpB,kBAAK,aAAK,eAAL,EAAoB,YAApB,EAAkC,eAAlC,C;IAEL,IAAI,YAAJ,C;MACI,kBAAK,iBAAQ,eAAR,EAAuB,CAAvB,EAA0B,eAA1B,C;;IAGT,sBAAe,c;IAEf,SAAS,uBAAe,eAAf,QAA+B,CAAxC,C;IACA,sBAAe,C;IACf,YAAK,mBAAL,IAAqB,aAAa,gBAAc,CAAd,CAAb,C;IACrB,cAAO,mBAAP,IAAuB,eAAe,gBAAc,CAAd,CAAf,C;IACvB,aAAa,G;IACb,IAAI,mBAAJ,C;MACI,SAAS,oBAAT,C;MACA,0BAAO,WAAI,wCAAe,gBAAc,CAAd,CAAf,CAAJ,C;;IAMX,iBAAiB,UAAM,oBAAW,WAAX,EAAwB,kBAAxB,C;IACvB,SAAS,UAAM,WAAE,GAAF,EAAO,UAAP,C;IACf,aAAa,qBAAc,UAAM,WAAE,KAAK,CAAP,EAAU,UAAV,C;IACf,wB;IAAlB,eAAU,CAAV,sB;MACI,SAAS,gBAAc,GAAd,C;MACT,qBAAqB,cAAO,mBAAP,IAAuB,eAAe,EAAf,C;MAC5C,iBAAiB,SAAS,c;MAC1B,W;MACA,IAAI,oDAAJ,C;QACI,SAAS,SAAS,kB;QAClB,SAAS,CAAC,SAAS,cAAV,IAA4B,kB;QACT,+B;QAA0B,QAAI,UAAM,aAAI,EAAJ,EAAQ,UAAR,C;QAAV,QAA+B,UAAM,aAAI,EAAJ,EAAQ,UAAR,C;QAA3F,UAAU,kBAAkB,SX3CiB,MAAW,KAAI,CAAJ,EAAO,CAAP,C;;;QW6CxD,UAAU,cAAc,M;;MAG5B,IAAI,OAAJ,C;QAGI,cAAO,mBAAP,kBAAO,mBAAP,IAAwB,eAAe,EAAf,C;QACxB,YAAK,mBAAL,IACI,YAAK,mBAAL,IAAqB,CAAC,aAAa,EAAb,IAAmB,YAAK,mBAAL,CAApB,IAA0C,eAAe,EAAf,CAA1C,GAA+D,cAAO,mBAAP,C;QACxF,eAAe,EAAf,IAAqB,G;QAErB,IAAI,mBAAJ,C;UACI,OAAO,0BAAO,KAAP,IAAe,mBAAtB,C;YACI,0BAAO,WZrVyB,gBYqVzB,C;;UAEX,SAAS,oBAAT,C;UACA,SAAS,uCAAO,mBAAP,MAAyB,wCAAe,EAAf,CAAlC,C;UACA,uCAAO,mBAAP,CAAqB,gBAAO,wCAAe,EAAf,CAAP,C;;;;QAIzB,UAAU,cAAO,mBAAP,C;QACV,IAAI,CAAC,oDAAL,C;UACI,KAAK,UAAM,WAAE,SAAS,kBAAX,EAAwB,UAAxB,C;UACX,SAAS,qBAAc,UAAM,WAAE,KAAK,CAAP,EAAU,UAAV,C;;QAGjC,iD;QACA,YAAK,mBAAL,IAAqB,aAAa,EAAb,C;QACrB,cAAO,mBAAP,IAAuB,eAAe,EAAf,C;QACvB,eAAe,EAAf,IAAqB,G;QAErB,IAAI,mBAAJ,C;UACI,SAAS,oBAAT,C;UACA,SAAS,0BAAO,KAAP,KAAe,mBAAxB,C;UACA,0BAAO,WAAI,wCAAe,EAAf,CAAJ,C;;;;IAKnB,iD;IAGA,UAAU,G;IACQ,4B;IAAlB,eAAU,CAAV,sB;MACI,OAAO,cAAO,GAAP,C;;IAEX,SAAS,QAAO,kBAAhB,C;IACA,IAAI,YAAJ,C;MACI,kBAAK,iBAAQ,WAAR,EAAc,CAAd,EAAiB,mBAAjB,C;MACL,kBAAK,iBAAQ,aAAR,EAAgB,CAAhB,EAAmB,mBAAnB,C;MACL,IAAI,mBAAJ,C;QACW,QAAP,0BAAO,C;;;IAIf,IAAI,qBAAc,CAAlB,C;MACsB,UAAI,Q;MAAJ,UAAS,YAAK,CAAL,C;MAA3B,WXtGiD,MAAW,KAAI,GAAJ,EAAO,GAAP,C;MWuG1C,UAAI,Q;MAAJ,UAAS,YAAK,sBAAe,CAAf,IAAL,C;MAA3B,WX9FiD,MAAW,KAAI,GAAJ,EAAO,GAAP,C;;EWgGpE,C;iDAEA,Y;IAII,OAAO,oBAAa,aAAb,EAAqB,kBAArB,EAAkC,mBAAlC,C;EACX,C;2CAEA,0B;IAKQ,IAQc,I;IAZlB,eAAe,C;IAEf,QAAQ,I;IACR,IAAI,EAAE,CAAF,IAAO,CAAX,C;MACI,a;;IAGJ,iBAAiB,UAAM,oBAAW,wBAAX,EAA8B,kBAA9B,C;IACvB,SAAS,UAAM,WAAE,GAAF,EAAO,UAAP,C;IACf,QAAQ,G;IACR,WAAW,G;IACX,aAAa,I;IACK,Q;IAAlB,aAAU,CAAV,gB;MACI,SAAS,EAAE,CAAF,IAAO,K;MAChB,SAAS,UAAM,WAAE,IAAI,EAAN,EAAU,UAAV,C;MACf,KAAK,KAAK,C;MACV,IAAI,KAAK,EAAL,GAAU,CAAV,IAAe,EAAE,CAAF,MAAQ,GAA3B,C;QACI,QACO,MAAH,6BAAgC,CAAhC,aAAuC,EAAvC,aAA+C,EAA/C,cAAwD,KAAG,EAA3D,aAAoE,EAAE,CAAF,CAApE,YAA8E,CAA9E,aAAqF,EAArF,eAA+F,IAA/F,kBAA+G,EAAE,CAAF,CAA/G,cAA4H,UAAM,aAAI,CAAJ,EAAO,UAAP,CADtI,C;QAGA,SAAS,E;QACT,2B;;MAEJ,IAAI,KAAK,EAAL,GAAU,CAAV,IAAe,EAAE,CAAF,MAAQ,GAA3B,C;QACI,MAAM,2BACF,uCAAoC,CAApC,aAA2C,EAA3C,aAAmD,EAAnD,cAA4D,KAAG,EAA/D,aAAwE,EAAE,CAAF,CAAxE,YAAkF,CAAlF,aAAyF,EAAzF,eAAmG,IAAnG,kBAAmH,EAAE,CAAF,CAAnH,cAAgI,UAAM,aAAI,CAAJ,EAAO,UAAP,CADpI,C;;MAIV,KAAK,KAAK,C;MACV,QAAQ,EAAE,CAAF,C;MACR,KAAK,E;;IAGT,OAAO,Q;EACX,C;qCAEA,Y;IAOI,sBAAe,IAAf,EAAqB,wBAArB,C;EACJ,C;iCAEA,Y;IACI,OAAsC,uBAA9B,qBAAc,qBAAgB,C;EAC1C,C;wCAEA,a;IASe,UAyBI,MAzBJ,EAuHA,M;IA/HX,uB;IAEA,IAAI,wBAAgB,CAApB,C;MAEI,OAAO,wCAAO,I;;UACX,IAAI,wBAAgB,CAApB,C;MAEH,YAAY,WAAM,Q;MACX,IAAI,IAAI,QAAR,C;QACH,U;;YACG,IAAI,IAAI,QAAR,C;QACH,U;;YACG,IAAI,IAAI,QAAJ,IAAW,KAAf,C;QAEH,U;;;QAGA,QAAC,IAAI,QAAL,KAAa,WAAM,QAAnB,C;;MATJ,W;;;MAYA,QAAQ,mB;MACR,IAAI,IAAI,QAAR,C;QACI,OAAO,G;;MAGX,IAAI,IAAI,QAAR,C;QACI,OAAO,G;;MAIX,IAAI,IAAI,YAAK,CAAL,CAAR,C;QAGW,IAAI,YAAK,CAAL,IAAU,QAAV,GAAgB,CAApB,C;UAEH,IAAI,MAAK,QAAT,C;YACI,eAAM,kB;;;YAEN,UAAC,IAAI,CAAC,IAAI,QAAL,KAAa,YAAK,CAAL,IAAU,QAAvB,KAA+B,cAAO,CAAP,IAAY,CAAZ,GAAgB,CAA/C,CAAL,IAA0D,kB;;;;UAI9D,Y;;QATJ,a;;MAYJ,SAAS,KAAK,YAAK,CAAL,CAAd,C;MAGA,IAAI,IAAI,YAAK,IAAI,CAAJ,IAAL,CAAR,C;QACI,IAAI,WAAM,YAAK,IAAI,CAAJ,IAAL,CAAN,GAAoB,CAAxB,C;UACI,IAAI,MAAK,QAAT,C;YACI,OAAO,IAAI,MAAM,kB;;;YAGjB,SAAS,CAAC,IAAI,CAAC,WAAM,CAAP,KAAa,WAAM,YAAK,IAAI,CAAJ,IAAL,CAAnB,KAAmC,cAAO,IAAI,CAAJ,IAAP,IAAgB,CAAhB,GAAoB,CAAvD,CAAL,IAAkE,kB;YAC3E,OAAO,IAAI,E;;;;UAGf,OAAO,G;;;MAOf,kBAAkB,G;MAClB,SAAS,C;MACT,OAAO,MAAK,IAAI,CAAJ,IAAL,CAAP,C;QAEI,IAAI,YAAK,EAAL,MAAY,CAAhB,C;UAGI,SAAS,G;UACT,OAAO,KAAK,CAAL,IAAU,YAAK,EAAL,MAAY,CAA7B,C;YACI,MAAM,cAAO,EAAP,C;YACN,e;;UAEJ,OAAO,CAAC,cAAc,KAAK,CAApB,IAAyB,kB;;cAC7B,IAAI,YAAK,EAAL,KAAY,CAAZ,IAAiB,IAAI,YAAK,KAAK,CAAL,IAAL,CAAzB,C;UAEH,IAAI,YAAK,KAAK,CAAL,IAAL,IAAe,YAAK,EAAL,CAAf,GAA0B,CAA9B,C;YAKI,oBAAoB,G;YACpB,qBAAqB,G;YACrB,IAAI,cAAO,EAAP,MAAc,GAAlB,C;cACI,IAAI,cAAO,KAAK,CAAL,IAAP,MAAkB,GAAtB,C;gBAGI,OAAO,CAAC,cAAc,CAAf,IAAoB,kB;;;gBAE3B,gBAAgB,G;;;kBAEjB,IAAI,cAAO,KAAK,CAAL,IAAP,MAAkB,GAAtB,C;cACH,iBAAiB,G;;YAErB,WAAS,CAAC,cAAO,EAAP,IAAa,cAAO,KAAK,CAAL,IAAP,CAAd,IAAgC,C;YAGzC,SAAS,OAAK,CAAd,C;YACA,SAAS,gBAAgB,cAAhB,IAAkC,GAA3C,C;YAGA,WAAW,YAAK,EAAL,C;YACX,YAAY,YAAK,KAAK,CAAL,IAAL,C;YAEZ,oBAAoB,OAAK,aAAL,GAAqB,c;YAGzC,SAAS,gBAAgB,OAAK,CAA9B,C;YACA,SAAS,QAAQ,IAAR,GAAe,CAAxB,C;YACA,WAAW,cAAc,cAAO,EAAP,IAAa,CAA3B,GAA+B,a;YAC1C,OAAO,CAAC,OAAO,iBAAiB,IAAI,IAArB,KAA8B,QAAQ,IAAtC,CAAR,IAAuD,kB;;;YAK9D,WAAS,CAAC,cAAO,EAAP,IAAa,cAAO,KAAK,CAAL,IAAP,CAAd,IAAgC,C;YACzC,OAAO,CAAC,cAAc,IAAf,IAAqB,kB;;;;UAGhC,eAAe,cAAO,EAAP,C;;QAEnB,e;;MAEG,IAAI,MAAK,YAAK,IAAI,CAAJ,IAAL,CAAT,C;QACH,aAAI,MAAM,kB;;;QAEV,MAAM,2BAAsB,oCAAtB,C;;MAHV,a;;EAMR,C;qCAEA,a;IA8CsB,Q;IA7ClB,IAAI,IAAI,CAAJ,IAAS,IAAI,CAAjB,C;MACI,MAAM,gCAAyB,+BAA4B,CAArD,C;;IAEV,uB;IAEA,IAAI,wBAAgB,CAApB,C;MAEI,OAAO,wCAAO,I;;UACX,IAAI,wBAAgB,CAApB,C;MAEH,OAAO,YAAK,CAAL,C;;IAIX,QAAQ,mB;IAGR,YAAY,IAAI,kB;IAIhB,IAAI,QAAQ,CAAZ,C;MACI,OAAO,Q;;IAKX,IAAI,cAAO,CAAP,IAAY,CAAZ,IAAiB,QAAQ,cAAO,CAAP,IAAY,CAAzC,C;MAEI,OAAO,WAAM,CAAC,QAAQ,CAAT,KAAe,cAAO,CAAP,IAAY,CAAZ,GAAgB,CAA/B,KAAqC,YAAK,CAAL,IAAU,QAA/C,C;;IAIjB,IAAI,QAAQ,qBAAc,CAA1B,C;MACI,OAAO,Q;;IAKX,IAAI,cAAO,IAAI,CAAJ,IAAP,IAAgB,CAAhB,IAAqB,qBAAc,KAAd,IAAuB,cAAO,IAAI,CAAJ,IAAP,IAAgB,CAAhE,C;MACI,OAAO,WAAM,CAAC,qBAAc,KAAd,GAAsB,GAAvB,KAA+B,cAAO,IAAI,CAAJ,IAAP,IAAgB,CAAhB,GAAoB,CAAnD,KAAyD,WAAM,YAAK,IAAI,CAAJ,IAAL,CAA/D,C;;IAIjB,kBAAkB,cAAO,CAAP,IAAY,C;IACZ,WAAI,CAAJ,I;IAAlB,aAAU,CAAV,gB;MACI,SAAS,CAAC,cAAO,CAAP,IAAY,cAAO,IAAI,CAAJ,IAAP,CAAb,IAA8B,C;MACvC,IAAI,cAAc,EAAd,GAAmB,KAAvB,C;QAII,eAAe,G;QACf,IAAI,cAAO,CAAP,MAAa,GAAjB,C;UACI,IAAI,QAAQ,WAAR,GAAsB,GAA1B,C;YAEI,OAAO,YAAK,CAAL,C;;;YAEP,WAAW,G;;;QAGnB,gBAAgB,G;QAChB,IAAI,cAAO,IAAI,CAAJ,IAAP,MAAiB,GAArB,C;UACI,IAAI,cAAc,EAAd,GAAmB,KAAnB,IAA4B,GAAhC,C;YAEI,OAAO,YAAK,IAAI,CAAJ,IAAL,C;;UAEX,YAAY,G;;QAEhB,SAAS,QAAQ,WAAR,GAAsB,Q;QAC/B,SAAS,cAAc,EAAd,GAAmB,KAAnB,GAA2B,S;QACpC,OAAO,gEAAgB,YAAK,CAAL,CAAhB,EAAyB,EAAzB,EAA6B,YAAK,IAAI,CAAJ,IAAL,CAA7B,EAA0C,EAA1C,C;;MAEX,eAAe,E;;IAGnB,SAAS,cAAO,IAAI,CAAJ,IAAP,IAAgB,CAAzB,C;IACA,SAAS,SAAS,kBAAlB,C;IACA,SAAS,SAAS,qBAAc,cAAO,IAAI,CAAJ,IAAP,IAAgB,CAAhD,C;IAIA,WAAS,QAAQ,kBAAR,GAAsB,cAAO,IAAI,CAAJ,IAAP,IAAgB,G;IAC/C,WAAS,cAAO,IAAI,CAAJ,IAAP,IAAgB,CAAhB,GAAoB,I;IAC7B,OAAO,gEAAgB,YAAK,IAAI,CAAJ,IAAL,CAAhB,EAA6B,IAA7B,EAAiC,QAAjC,EAAsC,IAAtC,C;EACX,C;0CAEA,Y;IACI,uB;IACA,OAAO,mB;EACX,C;EAKW,mE;IAAA,4C;IAAS,6B;G;EAED,0F;IAAA,4C;IACH,SAAQ,C;G;mFAER,Y;IACI,OAAO,SAAI,sC;EACf,C;gFAEA,Y;IACI,SAAS,gBACL,+BAAK,MAAL,CADK,EAEK,YAAV,iCAAO,MAAP,CAAU,CAFL,EAGD,sCAAJ,GAAkB,0DAAO,MAAP,CAAlB,GAAiC,IAH5B,C;IAKT,uB;IACA,OAAO,E;EACX,C;kFAEA,Y;IACI,MAAM,mCAA8B,mBAA9B,C;EACV,C;;;;;6DApBR,Y;IACI,gG;EAqBJ,C;;SAEuB,Y;MACnB,OAAO,sC;IACX,C;;;;;;sCA9BR,Y;IAEI,e;IACA,sD;EA6BJ,C;wCAEA,Y;IACI,OAAO,wB;EACX,C;qCAEA,Y;IACI,e;IAGA,OAAO,uBAAe,EAAf,QAAoB,EAApB,I;EACX,C;0CAEA,Y;IACI,e;IAGA,OAAO,uBAAe,CAAf,QAAmB,EAAnB,I;EACX,C;EAEoB,qD;IAApB,e;IAAiC,gB;IAAjC,iB;IAAA,uB;G;EAAA,6C;IAAA,gD;K;IACI,qGAAiB,CAAjB,C;IAAqB,iGAAe,CAAf,C;G;;EAArB,+D;IAAA,mC;IAAA,uD;G;;EAAqB,6D;IAAA,mC;IAAA,qD;G;;;;;;EADzB,yC;IAAA,mH;G;;EAAA,8C;IAAA,a;MAAA,wB;QAAA,4D;MAAA,sB;QAAA,0D;MAAA,QAAA,mF;;G;;oCAIA,e;IAOsB,Q;IANlB,e;IACA,GAAI,kBAAmC,0DAAnC,C;IACJ,GAAI,qBAAY,QAAZ,C;IACJ,GAAI,qBAAY,QAAZ,C;IACJ,GAAI,qBAAY,wBAAZ,C;IACJ,GAAI,kBAAS,mBAAT,C;IACc,0B;IAAlB,aAAU,CAAV,gB;MACI,GAAI,qBAAY,cAAO,CAAP,CAAZ,C;MACJ,GAAI,qBAAY,YAAK,CAAL,CAAZ,C;;EAEZ,C;yCAEA,e;IASsB,Q;IARlB,e;IACA,GAAI,kBAAiC,wDAAjC,C;IACJ,GAAI,qBAAY,QAAZ,C;IACJ,GAAI,qBAAY,QAAZ,C;IACJ,GAAI,oBAA6B,wBAA7B,C;IACJ,GAAI,oBAAqB,QAAV,WAAK,OAAK,CAArB,C;IACJ,GAAI,oBAAyB,QAAd,eAAS,OAAK,CAAzB,C;IACJ,GAAI,oBAAwB,QAAb,mBAAa,CAAxB,C;IACc,0B;IAAlB,aAAU,CAAV,gB;MACI,GAAI,oBAAW,aAAU,CAAH,CAAG,CAArB,C;MACJ,GAAI,oBAAW,WAAQ,CAAH,CAAG,CAAnB,C;;EAEZ,C;qCAEA,Y;IACI,OAAQ,kBACE,GADF,YACQ,kBADR,IAEE,GAFF,IAEa,oDAAJ,GAAoB,QAApB,GAAkC,OAF3C,IAGE,GAHF,IAGa,uBAAJ,GAAwB,aAAxB,GAA2C,QAHpD,IAIE,GAJF,IAIY,2BAAJ,GAA4B,UAA5B,GAA4C,UAJpD,C;EAKZ,C;EAEA,mC;IAAA,uC;IAEI,sBAIqB,I;G;gDACrB,e;IAW0B,IAgBE,I;IAzBxB,eAAe,GAAI,U;IACnB,IAAI,aAAsC,0DAA1C,C;MACI,UAAU,GAAI,a;MACd,UAAU,GAAI,a;MACd,kBAAkB,GAAI,a;MACtB,QAAQ,GAAI,U;MACZ,QAAQ,kBAAc,WAAd,C;MACR,CAAE,mBAAU,GAAV,EAAe,GAAf,C;MACF,mBAAiB,C;MACjB,aAAU,CAAV,MAAkB,CAAlB,M;QACI,CAAE,SAAF,CAAS,CAAT,IAAc,GAAI,a;QAClB,CAAE,OAAF,CAAO,CAAP,IAAY,GAAI,a;QAEhB,kBAAA,CAAE,cAAF,GAAiB,CAAE,SAAF,CAAS,CAAT,C;;MAErB,OAAO,C;;UACJ,IAAI,aAAoC,wDAAxC,C;MACH,YAAU,GAAI,a;MACd,YAAU,GAAI,a;MACd,oBAAkB,GAAgB,Y;MAClC,UAAQ,GAAgB,Y;MACxB,iBAAiB,GAAgB,Y;MACjC,UAAQ,kBAAc,aAAd,EAA2B,UAA3B,EAAuC,GAAvC,C;MACR,GAAE,mBAAU,KAAV,EAAe,KAAf,C;MACF,qBAAiB,GAAgB,Y;MACb,OAAF,GAAE,e;MAApB,eAAU,CAAV,oB;QACI,GAAE,SAAF,CAAS,GAAT,IAAc,GAAgB,Y;QAC9B,GAAE,OAAF,CAAO,GAAP,IAAY,GAAgB,Y;QAE5B,oBAAA,GAAE,cAAF,GAAiB,GAAE,SAAF,CAAS,GAAT,C;;MAErB,OAAO,G;;;MAEP,MAAM,2BAAsB,yCAAtB,C;;EAGd,C;;;;;;;EA7CJ,+C;IAAA,8C;MAAA,6B;;IAAA,uC;G;;;;;;ECt0BJ,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAYI,uB;IAiCA,uB;IA+CA,4B;IAqDA,uB;IAsEA,uB;IAyEA,+B;IAyDA,+B;IAuJA,qC;G;EApeA,6B;IAAA,iC;IAAA,kC;G;0CAII,6B;IACI,OAAO,cAAc,CAAd,GAAkB,C;EAC7B,C;0CAEA,yB;IACI,OAAO,aAAa,C;EACxB,C;0CAEA,6B;IACI,OAAO,IAAI,CAAJ,GAAQ,W;EACnB,C;0CAEA,yB;IACI,OAAO,IAAI,U;EACf,C;4CAEA,6B;IACI,OAAO,IAAI,W;EACf,C;4CAEA,yB;IACI,OAAO,IAAI,U;EACf,C;mDAEA,0B;IACI,OAAO,cAAc,C;EACzB,C;;;;;;;EA9BJ,yC;IAAA,0B;IAAA,iC;G;EAiCA,6B;IAAA,iC;IAAA,kC;G;0CAKI,6B;IACqC,QAAK,IAAI,CAAJ,GAAQ,C;IAA9C,OAAO,cZpBgC,MAAW,MAAK,CAAL,CYoB3C,IAA6C,IAAgB,OAA7D,C;EACX,C;0CAEA,yB;IACoC,QAAK,IAAI,CAAJ,GAAQ,C;IAA7C,OAAO,aZxBgC,MAAW,MAAK,CAAL,C;EYyBtD,C;0CAGA,6B;IACwB,QAAI,KAAK,IAAgB,OAAhB,GAAqB,WAA1B,C;IAAxB,OAAO,CZ1D+B,MAAW,KAAI,CAAJ,CY0DzC,GAA0D,CAA3D,IAAgE,C;EAC3E,C;0CAEA,yB;IACwB,QAAI,IAAI,U;IAA5B,OAAO,CZ9D+B,MAAW,KAAI,CAAJ,CY8DzC,GAAkC,CAAnC,IAAwC,C;EACnD,C;4CAEA,6B;IACW,Q;IAAA,IAAI,KAAK,CAAT,C;MACH,U;;UACG,IAAI,KAAK,CAAT,C;MACH,U;;;MAEgB,QAAgB,OAAZ,GAAiB,W;MAArC,iBZvEkC,MAAW,KAAI,CAAJ,C;MYuEmB,UAAK,KAAK,IAAI,CAAT,C;MAArE,gBZmGmC,MAAW,MAAK,GAAL,C;;IYxGlD,W;EAOJ,C;4CAEA,yB;IACW,Q;IAAA,IAAI,KAAK,CAAT,C;MACH,U;;UACG,IAAI,KAAK,CAAT,C;MACH,U;;;MAEgB,QAAI,MAAM,U;MAA1B,iBZjFkC,MAAW,KAAI,CAAJ,C;MYiFO,UAAK,KAAK,IAAI,CAAT,C;MAAzD,gBZyFmC,MAAW,MAAK,GAAL,C;;IY9FlD,W;EAOJ,C;mDAEA,0B;IACI,OAAO,eAAe,IAAgB,OAA/B,C;EACX,C;;;;;;;EA5CJ,yC;IAAA,0B;IAAA,iC;G;EA+CA,kC;IAAA,sC;IAAA,uC;G;+CAMI,6B;IACI,OAAO,cAAc,uDAAS,IAAI,CAAJ,GAAQ,CAAjB,CAAd,IAAqC,IAAgB,OAArD,C;EACX,C;+CAGA,yB;IACI,OAAO,aAAa,uDAAS,IAAI,CAAJ,GAAQ,CAAjB,C;EACxB,C;+CAGA,6B;IACwB,QAAI,KAAK,IAAgB,OAAhB,GAAqB,WAA1B,C;IAAxB,OAAO,CZ3G+B,MAAW,KAAI,CAAJ,CY2GzC,GAA0D,CAA3D,IAAgE,C;EAC3E,C;+CAGA,yB;IACwB,QAAI,IAAI,U;IAA5B,OAAO,CZhH+B,MAAW,KAAI,CAAJ,CYgHzC,GAAkC,CAAnC,IAAwC,C;EACnD,C;iDAGA,6B;IACW,Q;IAAA,IAAI,KAAK,CAAT,C;MACH,U;;UACG,IAAI,KAAK,CAAT,C;MACH,U;;;MAEgB,QAAgB,OAAZ,GAAiB,W;MAArC,iBZ1HkC,MAAW,KAAI,CAAJ,C;MY0HmB,UAAK,KAAK,IAAI,CAAT,C;MAArE,gBZgDmC,MAAW,MAAK,GAAL,C;;IYrDlD,W;EAOJ,C;iDAGA,yB;IACW,Q;IAAA,IAAI,KAAK,CAAT,C;MACH,U;;UACG,IAAI,KAAK,CAAT,C;MACH,U;;;MAEgB,QAAI,MAAM,U;MAA1B,iBZrIkC,MAAW,KAAI,CAAJ,C;MYqIO,UAAK,KAAK,IAAI,CAAT,C;MAAzD,gBZqCmC,MAAW,MAAK,GAAL,C;;IY1ClD,W;EAOJ,C;wDAGA,0B;IACI,OAAO,eAAe,IAAgB,OAA/B,C;EACX,C;;;;;;;EAlDJ,8C;IAAA,0B;IAAA,sC;G;EAqDA,6B;IAAA,iC;IAAA,kC;G;0CAMI,6B;IAEe,UAQJ,M;IATP,IAAI,KAAK,CAAT,C;MACW,IAAI,KAAK,CAAT,C;QACH,QAAC,I;;YACE,IAAI,KAAK,CAAT,C;QACH,W;;;QAEA,U;;MALJ,W;;IAQG,IAAI,MAAK,GAAT,C;MACH,aAAI,eAAE,IAAI,CAAN,EAAS,WAAT,EAAsB,CAAtB,C;;UACD,IAAI,MAAK,GAAT,C;MACH,aAAI,eAAE,CAAC,IAAI,CAAL,IAAU,CAAZ,EAAe,WAAf,EAA4B,CAA5B,C;;;MAEsB,QAAG,KAAK,IAAI,CAAT,C;MAA7B,uBZiEiC,MAAW,KAAI,CAAJ,CYjE5C,GAA4C,SAAE,WAAF,EAAe,CAAf,C;;IALhD,a;EAOJ,C;0CAGA,yB;IACW,Q;IAAA,IAAI,IAAI,OAAR,C;MAEH,WAAI,eAAE,OAAF,EAAS,UAAT,C;;UACD,IAAI,IAAI,IAAI,OAAZ,C;MAEH,WAAI,eAAE,IAAI,OAAN,EAAa,UAAb,C;;;MAEQ,QAAG,KAAK,IAAI,CAAT,C;MAAf,OZoDiC,MAAW,KAAI,CAAJ,CYpD5C,GAA8B,U;;IAPlC,W;EASJ,C;0CAGA,6B;IACwB,QAAI,IAAI,SAAE,WAAF,EAAe,CAAf,CAAJ,GAAwB,W;IAAhD,QZDsC,MAAW,KAAI,CAAJ,C;IYEjD,OAAO,KAAK,IAAI,CAAT,C;EACX,C;0CAGA,yB;IACwB,QAAI,IAAI,U;IAA5B,QZPsC,MAAW,KAAI,CAAJ,C;IYQjD,OAAO,KAAK,IAAI,CAAT,C;EACX,C;4CAGA,6B;IACI,OAAO,SAAE,WAAF,EAAe,CAAf,IAAoB,CAApB,IAAyB,IAAI,CAA7B,IAAkC,W;EAC7C,C;4CAGA,yB;IACI,OAAO,KAAK,IAAI,CAAT,IAAc,U;EACzB,C;mDAGA,0B;IACI,OAAO,cAAc,SAAE,WAAF,EAAe,CAAf,C;EACzB,C;oCAEA,0B;IAC2B,QAAG,IAAI,W;IAA9B,OAAO,IZoB8B,MAAW,KAAI,CAAJ,CYpBzC,GAAsC,E;EACjD,C;;;;;;;EAnEJ,yC;IAAA,0B;IAAA,iC;G;EAsEA,6B;IAAA,iC;IAAA,kC;G;0CAMI,6B;IACW,Q;IAAA,IAAI,IAAI,MAAM,CAAd,C;MACH,YAAK,eAAE,IAAI,CAAN,EAAS,WAAT,EAAsB,CAAtB,C;;UACF,IAAI,IAAI,IAAI,MAAM,CAAlB,C;MACH,YAAK,eAAE,CAAC,IAAI,CAAL,IAAU,CAAZ,EAAe,WAAf,EAA4B,CAA5B,C;;;MAEL,IAAI,KAAK,GAAT,C;QAC8B,QAAG,IAAI,C;QAAjC,qBZG6B,MAAW,KAAI,CAAJ,CYHxC,GAAsC,SAAE,WAAF,EAAe,CAAf,C;;;QAEtC,QAAC,eAAE,IAAI,CAAN,EAAS,WAAT,EAAsB,CAAtB,C;;;IART,W;EAWJ,C;0CAGA,yB;IACW,Q;IAAA,IAAI,IAAI,OAAR,C;MACH,YAAK,eAAE,OAAF,EAAS,UAAT,C;;UACF,IAAI,IAAI,IAAI,OAAZ,C;MACH,YAAK,eAAE,IAAI,OAAN,EAAa,UAAb,C;;;MAEL,IAAI,KAAK,GAAT,C;QACgB,QAAG,IAAI,C;QAAnB,OZZ6B,MAAW,KAAI,CAAJ,CYYxC,GAAwB,U;;;QAExB,QAAC,eAAE,IAAI,CAAN,EAAS,UAAT,C;;;IART,W;EAWJ,C;0CAGA,6B;IACW,Q;IAAA,IAAI,KAAK,CAAT,C;MACS,QAAI,IAAI,SAAE,WAAF,EAAe,CAAf,CAAJ,GAAwB,W;MAAxC,OZrEkC,MAAW,KAAI,CAAJ,CYqE7C,GAAuD,C;;;MAEvD,WAAI,eAAE,CAAC,CAAH,EAAM,WAAN,EAAmB,CAAnB,C;;IAHR,W;EAKJ,C;0CAGA,yB;IACW,Q;IAAA,IAAI,KAAK,CAAT,C;MACS,QAAI,IAAI,U;MAApB,OZ9EkC,MAAW,KAAI,CAAJ,CY8E7C,GAAkC,C;;;MAElC,WAAI,eAAE,CAAC,CAAH,EAAM,UAAN,C;;IAHR,W;EAKJ,C;4CAGA,6B;IACW,oBAAE,WAAF,EAAe,CAAf,C;IAAgC,QAAO,IAAI,C;IAAlD,OAAO,OZmF0C,MAAW,KYnFjB,CZmFiB,EAAO,CAAP,CYnFrD,GAAgD,W;EAC3D,C;4CAGA,yB;IACuB,QAAO,IAAI,C;IAA9B,OZ8EiD,MAAW,KY9ErC,CZ8EqC,EAAO,CAAP,CY9ErD,GAA4B,U;EACvC,C;mDAGA,0B;IACI,OAAO,cAAc,SAAE,WAAF,EAAe,CAAf,C;EACzB,C;oCAEA,0B;IAC2B,QAAG,IAAI,W;IAA9B,OAAO,IZrD8B,MAAW,KAAI,CAAJ,CYqDzC,GAAsC,E;EACjD,C;;;;;;;EAtEJ,yC;IAAA,0B;IAAA,iC;G;EAyEA,qC;IAAA,yC;IAAA,0C;G;kDAQI,6B;IACW,Q;IAAA,IAAI,MAAK,GAAT,C;MACH,WAAI,eAAE,IAAI,CAAN,EAAS,WAAT,EAAsB,CAAtB,C;;UACD,IAAI,MAAK,GAAT,C;MACH,WAAI,eAAE,CAAC,IAAI,CAAL,IAAU,CAAZ,EAAe,WAAf,EAA4B,CAA5B,C;;;MAEsB,QAAG,KAAK,IAAI,CAAT,C;MAA7B,qBZvEiC,MAAW,KAAI,CAAJ,C;;IYkEhD,W;EAOJ,C;kDAGA,yB;IACW,Q;IAAA,IAAI,KAAK,OAAT,C;MACH,WAAI,eAAE,OAAF,EAAS,UAAT,C;;UACD,IAAI,KAAK,IAAI,OAAb,C;MACH,WAAI,eAAE,IAAI,OAAN,EAAa,UAAb,C;;;MAEqB,QAAG,KAAK,IAAI,CAAT,C;MAA5B,oBZlFiC,MAAW,KAAI,CAAJ,C;;IY6EhD,W;EAOJ,C;kDAGA,6B;IACwB,QAAI,IAAI,W;IAA5B,QZvIsC,MAAW,KAAI,CAAJ,C;IYwIjD,OAAO,KAAK,IAAI,CAAT,C;EACX,C;kDAGA,yB;IACwB,QAAI,IAAI,U;IAA5B,QZ7IsC,MAAW,KAAI,CAAJ,C;IY8IjD,OAAO,KAAK,IAAI,CAAT,C;EACX,C;oDAGA,6B;IACI,OAAO,KAAK,IAAI,CAAT,IAAc,W;EACzB,C;oDAGA,yB;IACI,OAAO,KAAK,IAAI,CAAT,IAAc,U;EACzB,C;2DAGA,0B;IACI,OAAO,W;EACX,C;;;;;;;EAtDJ,iD;IAAA,0B;IAAA,yC;G;EAyDA,qC;IAAA,yC;IAAA,0C;G;kDAQI,6B;IACW,Q;IAAA,IAAI,IAAI,MAAM,CAAd,C;MACH,YAAK,eAAE,IAAI,CAAN,EAAS,WAAT,EAAsB,CAAtB,C;;UACF,IAAI,IAAI,IAAI,MAAM,CAAlB,C;MACH,YAAK,eAAE,CAAC,IAAI,CAAL,IAAU,CAAZ,EAAe,WAAf,EAA4B,CAA5B,C;;;MAEL,IAAI,KAAK,GAAT,C;QAC8B,QAAG,IAAI,C;QAAjC,qBZjI6B,MAAW,KAAI,CAAJ,C;;;QYmIxC,QAAC,eAAE,IAAI,CAAN,EAAS,WAAT,EAAsB,CAAtB,C;;;IART,W;EAWJ,C;kDAGA,yB;IACW,Q;IAAA,IAAI,KAAK,OAAT,C;MACH,YAAK,eAAE,OAAF,EAAS,UAAT,C;;UACF,IAAI,IAAI,IAAI,OAAZ,C;MACH,YAAK,eAAE,IAAI,OAAN,EAAa,UAAb,C;;;MAEL,IAAI,KAAK,GAAT,C;QAC6B,QAAG,IAAI,C;QAAhC,oBZhJ6B,MAAW,KAAI,CAAJ,C;;;QYkJxC,QAAC,eAAE,IAAI,CAAN,EAAS,UAAT,C;;;IART,W;EAWJ,C;kDAGA,6B;IACW,Q;IAAA,IAAI,KAAK,CAAT,C;MACS,QAAI,IAAI,W;MAApB,OZzMkC,MAAW,KAAI,CAAJ,CYyM7C,GAAmC,C;;;MAEnC,WAAI,eAAE,CAAC,CAAH,EAAM,WAAN,EAAmB,CAAnB,C;;IAHR,W;EAKJ,C;kDAGA,yB;IACW,Q;IAAA,IAAI,KAAK,CAAT,C;MACS,QAAI,IAAI,U;MAApB,OZlNkC,MAAW,KAAI,CAAJ,CYkN7C,GAAkC,C;;;MAElC,WAAI,eAAE,CAAC,CAAH,EAAM,UAAN,C;;IAHR,W;EAKJ,C;oDAGA,6B;IACuB,QAAO,IAAI,C;IAA9B,OZjDiD,MAAW,KYiDrC,CZjDqC,EAAO,CAAP,CYiDrD,GAA4B,W;EACvC,C;oDAGA,yB;IACuB,QAAO,IAAI,C;IAA9B,OZtDiD,MAAW,KYsDrC,CZtDqC,EAAO,CAAP,CYsDrD,GAA4B,U;EACvC,C;2DAGA,0B;IACI,OAAO,W;EACX,C;;;;;;;EApEJ,iD;IAAA,0B;IAAA,yC;G;EAuJA,mC;IAAA,uC;G;uDAEI,a;IAUI,IAAI,IAAI,CAAR,C;MACI,OAAO,CAAC,sBAAS,CAAC,CAAV,C;;UACL,IAAI,IAAI,CAAR,C;MACH,OAAO,wCAAO,I;;;MAKd,aAAa,G;MACb,aAAa,I;MACb,YAAY,G;MACZ,aAAa,G;MACb,YAAY,I;MACZ,aAAa,G;MACb,YAAY,I;MACZ,IAAI,IAAI,MAAR,C;QACI,OZ7e+B,MAAW,MY6elB,CZ7ekB,C;;;QYgf1C,SAAS,kBAAc,YAAd,EAA4B,YAA5B,EAA0C,YAA1C,EAAwD,YAAxD,EAAsE,CAAC,YAAvE,EAAqF,YAArF,E;QACT,SAAS,kBAAc,CAAC,WAAf,EAA6B,WAA7B,EAA2C,CAAC,YAA5C,EAA0D,YAA1D,EAAwE,WAAxE,EAAsF,CAAC,YAAvF,E;QACT,SAAS,kBAAc,CAAC,cAAf,EAA+B,cAA/B,EAA+C,CAAC,cAAhD,EAAgE,cAAhE,EAAgF,cAAhF,EAAgG,CAAC,aAAjG,E;QACT,SAAS,kBAAc,CAAC,aAAf,EAA8B,aAA9B,EAA6C,CAAC,aAA9C,EAA6D,aAA7D,EAA4E,aAA5E,EAA2F,CAAC,YAA5F,E;QAGT,WAAW,kBAAc,GAAd,EAAmB,CAAnB,EAAsB,IAAI,CAA1B,EAA6B,IAAI,CAAJ,GAAQ,CAArC,EAAwC,KAAK,IAAI,CAAT,CAAxC,EAAqD,OAAO,IAAI,CAAX,KAAiB,IAAI,CAArB,CAArD,E;QAGX,SAAS,aAAM,CAAC,SAAS,CAAV,IAAe,MAArB,C;QACT,SAAS,aAAM,CAAC,SAAS,CAAV,KAAgB,SAAS,KAAzB,CAAN,C;QACT,SAAS,aAAM,CAAC,SAAS,CAAV,KAAgB,SAAS,KAAzB,CAAN,C;QACT,SAAS,aAAM,CAAC,SAAS,CAAV,KAAgB,SAAS,KAAzB,CAAN,C;QAIT,WAAW,CAAC,IAAI,EAAL,IAAW,E;QACtB,WAAW,CAAC,IAAI,EAAL,IAAW,E;QACtB,WAAW,CAAC,IAAI,EAAL,IAAW,E;QACtB,WAAW,IAAI,E;QAGf,QAAQ,G;QACR,IAAI,KAAK,CAAT,C;UACI,KAAK,KAAK,YAAK,EAAL,EAAS,IAAT,C;;QAEd,IAAI,OAAO,CAAX,C;UACI,KAAK,OAAO,YAAK,EAAL,EAAS,IAAT,C;;QAEhB,IAAI,OAAO,CAAX,C;UACI,KAAK,OAAO,YAAK,EAAL,EAAS,IAAT,C;;QAEhB,IAAI,OAAO,CAAX,C;UACI,KAAK,OAAO,YAAK,EAAL,EAAS,IAAT,C;;QAEhB,IAAI,OAAO,CAAX,C;UAEI,KAAK,OZrhBsB,MAAW,MYqhBT,CZrhBS,C;;QYuhB1C,OAAO,C;;;EAGnB,C;6CAEA,uB;IACI,QAAQ,G;IACR,sBAAU,KAAV,a;MACI,KAAK,MAAM,CAAN,IAAW,KAAK,CAAL,C;;IAEpB,OAAO,C;EACX,C;8CAEA,a;IACW,Q;IAAA,IAAI,KAAK,CAAT,C;MACH,U;;UACG,IAAI,KAAK,CAAT,C;MACH,U;;;MAEA,Q;;IALJ,W;EAOJ,C;;;;;;;EA3FJ,+C;IAAA,0B;IAAA,8C;MAAA,6B;;IAAA,uC;G;;;;;;EAhfJ,gC;IAAA,mQ;G;;EAAA,qC;IAAA,a;MAAA,W;QAAA,sC;MAAA,W;QAAA,sC;MAAA,gB;QAAA,2C;MAAA,W;QAAA,sC;MAAA,W;QAAA,sC;MAAA,mB;QAAA,8C;MAAA,mB;QAAA,8C;MAAA,QAAA,0E;;G;;ECIA,gB;IAAA,oB;IAII,cAA0B,OAAO,CAAP,C;G;+BAE1B,4B;IASI,kBAAK,KAAL,EAAY,MAAZ,EAAoB,CAApB,EAAuB,CAAvB,C;EACJ,C;gCAEA,mC;IAS+C,qB;MAAA,QAAa,C;IAAG,iB;MAAA,IAAS,MAAO,O;IACrD,Q;IAAA,eAAQ,CAAR,I;IAAtB,aAAU,KAAV,gB;MACI,MAAM,CAAN,IAAW,C;;IAEf,iBAAU,KAAV,EAAiB,MAAjB,EAAyB,KAAzB,EAAgC,QAAQ,CAAR,IAAhC,EAA2C,EAA3C,C;IACA,qBAAc,KAAd,EAAqB,MAArB,EAA6B,KAA7B,EAAoC,QAAQ,CAAR,IAApC,EAA+C,EAA/C,C;EACJ,C;+BAEA,4C;IAuCoB,IAwBI,IAxBJ,EAwBY,M;IArD5B,cAAY,K;IACZ,YAAU,G;IAEV,OAAO,SAAM,OAAN,QAAc,KAArB,C;MAGI,iBAAiB,UAAQ,WAAK,iBAAQ,QAAM,OAAN,IAAR,CAAb,I;MACjB,iBAAiB,OAAO,MAAM,UAAN,CAAP,C;MAGjB,YAAK,KAAL,EAAY,OAAZ,EAAmB,UAAnB,C;MAIA,UAAU,UAAQ,CAAR,I;MACV,WAAW,K;MACX,QAAQ,G;MACR,OAAO,IAAI,IAAX,C;QAOI,SAAS,OAAO,MAAM,CAAN,CAAP,C;QACT,IAAI,OAAM,UAAV,C;UACI,IAAI,QAAO,CAAX,C;YACI,YAAK,KAAL,EAAY,GAAZ,EAAiB,CAAjB,C;;;YAEA,a;;UAEJ,iB;;cACG,IAAI,KAAK,UAAT,C;UACH,mB;UACA,YAAK,KAAL,EAAY,CAAZ,EAAe,IAAf,C;;;UAGA,a;;;MAYR,WAAW,O;MACX,SAAS,OAAO,CAAP,I;MACT,IAAI,C;MACJ,OAAO,OAAO,GAAP,IAAc,MAAM,GAA3B,C;QACI,YAAK,KAAL,GAAY,WAAZ,EAAY,mBAAZ,UAAoB,WAApB,EAAoB,mBAApB,U;QACA,a;;MAEJ,IAAI,SAAQ,GAAZ,C;QAEI,MAAM,KAAK,CAAL,I;;;QAIN,MAAM,I;;MAMV,IAAI,OAAM,OAAN,SAAc,QAAM,IAAN,IAAd,CAAJ,C;QACI,iBAAU,KAAV,EAAiB,MAAjB,EAAyB,OAAzB,EAAgC,GAAhC,EAAqC,KAArC,C;QAIA,UAAQ,I;;;QAER,iBAAU,KAAV,EAAiB,MAAjB,EAAyB,IAAzB,EAA+B,KAA/B,EAAoC,KAApC,C;QAGA,QAAM,G;;;EAGlB,C;gCAEA,uB;IASI,kBAAK,GAAL,EAAU,CAAV,EAAa,GAAI,OAAjB,EAAwB,MAAxB,S;EACJ,C;gCAEA,iC;IASI,iBAAU,GAAV,EAAe,MAAf,EAAuB,KAAvB,EAA8B,QAAQ,CAAR,IAA9B,EAAyC,CAAzC,C;IACA,qBAAc,GAAd,EAAmB,MAAnB,EAA2B,KAA3B,EAAkC,QAAQ,CAAR,IAAlC,EAA6C,CAA7C,C;EACJ,C;+BAEA,0C;IAmFoB,IAwBH,IAxBG,EAwBK,M;IAjGrB,cAAY,K;IACZ,YAAU,G;IAEV,OAAO,SAAM,OAAN,QAAc,KAArB,C;MAGI,QAAQ,O;MACR,QAAQ,CAAC,UAAQ,KAAR,IAAD,IAAgB,CAAhB,I;MACR,QAAQ,QAAM,CAAN,I;MAER,c;MACA,c;MACA,SAAS,IAAI,CAAJ,C;MACT,SAAS,IAAI,CAAJ,C;MACT,SAAS,IAAI,CAAJ,C;MAET,IAAI,KAAK,EAAT,C;QACI,IAAI,KAAK,EAAT,C;UAEI,aAAa,C;UACb,aAAa,E;;;UAGb,IAAI,KAAK,EAAT,C;YAEI,aAAa,C;YACb,aAAa,E;;;YAGb,aAAa,C;YACb,aAAa,E;;;;;QAKrB,IAAI,KAAK,EAAT,C;UAEI,aAAa,C;UACb,aAAa,E;;;UAGb,IAAI,KAAK,EAAT,C;YAEI,aAAa,C;YACb,aAAa,E;;;YAGb,aAAa,C;YACb,aAAa,E;;;;MAMzB,YAAK,OAAL,EAAY,UAAZ,EAAwB,GAAxB,EAA8B,MAA9B,S;MAIA,UAAU,UAAQ,CAAR,I;MACV,WAAW,K;MACX,QAAQ,G;MACR,OAAO,IAAI,IAAX,C;QAOI,SAAS,IAAI,CAAJ,C;QACT,IAAI,OAAM,UAAV,C;UACI,IAAI,QAAO,CAAX,C;YACI,YAAK,GAAL,EAAU,CAAV,EAAa,GAAb,EAAmB,MAAnB,S;;;YAEA,a;;UAEJ,iB;;cACG,IAAI,KAAK,UAAT,C;UACH,mB;UACA,YAAK,CAAL,EAAQ,IAAR,EAAc,GAAd,EAAoB,MAApB,S;;;UAGA,a;;;MAYR,WAAW,O;MACX,SAAS,OAAO,CAAP,I;MACT,IAAI,C;MACJ,OAAO,OAAO,GAAP,IAAc,MAAM,GAA3B,C;QACI,aAAK,WAAL,EAAK,mBAAL,UAAa,WAAb,EAAa,mBAAb,WAAmB,GAAnB,EAAyB,MAAzB,S;QACA,a;;MAEJ,IAAI,SAAQ,GAAZ,C;QAEI,MAAM,KAAK,CAAL,I;;;QAIN,MAAM,I;;MAMV,IAAI,OAAM,OAAN,SAAc,QAAM,IAAN,IAAd,CAAJ,C;QACI,iBAAU,GAAV,EAAe,MAAf,EAAuB,OAAvB,EAA8B,GAA9B,EAAmC,KAAnC,C;QAIA,UAAQ,I;;;QAER,iBAAU,GAAV,EAAe,MAAf,EAAuB,IAAvB,EAA6B,KAA7B,EAAkC,KAAlC,C;QAGA,QAAM,G;;;EAGlB,C;mCAGA,0C;IAY8B,Q;IAA1B,aAAU,QAAQ,CAAR,IAAV,MAA0B,GAA1B,M;MACI,QAAQ,IAAI,CAAJ,C;MACY,QAAI,IAAI,KAAJ,I;MAAxB,Qb8rBwC,MAAW,KAAI,CAAJ,Ea9rBhB,Kb8rBgB,C;Ma7rBnD,aAAU,CAAV,OAAmB,CAAnB,M;QACI,IAAI,MAAK,CAAL,IAAU,IAAI,IAAI,CAAJ,IAAJ,KAAc,CAA5B,C;UACI,IAAI,IAAI,CAAR,C;YACI,mBAAM,mBAAU,GAAV,EAAe,CAAf,EAAkB,GAAlB,EAAuB,IAAI,CAAJ,IAAvB,EAA8B,IAAI,CAAJ,IAA9B,C;YACN,IAAI,CAAJ,IAAS,C;YACT,wBAAc,MAAd,gB;cAAc,YAAA,MAAd,M;cACI,UAAU,MAAM,CAAN,C;cACV,mBAAM,mBAAU,KAAV,EAAiB,CAAjB,EAAoB,KAApB,EAA2B,IAAI,CAAJ,IAA3B,EAAkC,IAAI,CAAJ,IAAlC,C;cACN,MAAM,CAAN,IAAW,G;;;UAGnB,K;;;;EAIhB,C;0BAEA,uB;IACI,QAAQ,MAAM,CAAN,C;IACR,MAAM,CAAN,IAAW,MAAM,CAAN,C;IACX,MAAM,CAAN,IAAW,C;EACf,C;0BAEA,6B;IACI,QAAQ,IAAI,CAAJ,C;IACR,IAAI,CAAJ,IAAS,IAAI,CAAJ,C;IACT,IAAI,CAAJ,IAAS,C;IAET,sBAAU,MAAV,a;MACI,IAAI,OAAO,CAAP,EAAU,CAAV,C;MACJ,OAAO,CAAP,EAAU,CAAV,IAAe,OAAO,CAAP,EAAU,CAAV,C;MACf,OAAO,CAAP,EAAU,CAAV,IAAe,C;;EAEvB,C;0CAEA,4D;IAoBI,IAAI,KAAM,OAAN,KAAc,MAAO,OAAzB,C;MACI,MAAM,gCAAyB,6BAAzB,C;;IAGV,IAAI,EAAE,SAAS,CAAT,IAAc,OAAO,KAArB,IAA8B,QAAQ,GAAtC,IAA6C,OAAO,IAAtD,CAAJ,C;MACI,MAAM,gCAAyB,qBAAkB,KAAlB,UAA0B,GAA1B,UAAgC,IAAhC,UAAuC,GAAhE,C;;IAGV,aAAU,CAAV,MAAkB,GAAlB,M;MACI,QAAQ,OAAO,MAAM,CAAN,CAAP,C;MACR,IAAI,KAAK,UAAT,C;QACI,MAAM,gCAAyB,iCAA8B,CAAvD,C;;;IAId,eAAU,GAAV,QAAoB,IAApB,Q;MACI,IAAI,OAAO,MAAM,GAAN,CAAP,MAAoB,UAAxB,C;QACI,MAAM,gCAAyB,kBAAe,GAAxC,C;;;IAId,eAAU,IAAV,QAAqB,GAArB,Q;MACI,UAAQ,OAAO,MAAM,GAAN,CAAP,C;MACR,IAAI,OAAK,UAAT,C;QACI,MAAM,gCAAyB,8BAA2B,GAApD,C;;;EAGlB,C;mCAEA,0C;IAWI,aAAU,QAAQ,CAAR,IAAV,MAA0B,CAA1B,M;MACI,QAAQ,MAAM,CAAN,C;MACR,QAAQ,OAAO,MAAM,CAAN,CAAP,C;MACY,QAAI,IAAI,KAAJ,I;MAAxB,Qb2lBwC,MAAW,KAAI,CAAJ,Ea3lBhB,Kb2lBgB,C;Ma1lBnD,aAAU,CAAV,OAAmB,CAAnB,M;QACI,IAAI,MAAK,CAAL,IAAU,OAAO,MAAM,IAAI,CAAJ,IAAN,CAAP,KAAwB,CAAtC,C;UACI,IAAI,IAAI,CAAR,C;YACI,mBAAM,mBAAU,KAAV,EAAiB,CAAjB,EAAoB,KAApB,EAA2B,IAAI,CAAJ,IAA3B,EAAkC,IAAI,CAAJ,IAAlC,C;YACN,MAAM,CAAN,IAAW,C;;UAEf,K;;;;EAIhB,C;mCAEA,iC;IAO6B,sB;MAAA,SAAc,C;IAAG,sB;MAAA,SAAc,KAAM,O;IAC5C,Q;IAAA,gBAAS,CAAT,I;IAAlB,aAAU,CAAV,gB;MACI,QAAQ,MAAM,SAAS,CAAT,IAAN,C;MACR,MAAM,SAAS,CAAT,IAAN,IAAoB,MAAM,SAAS,MAAT,GAAkB,CAAlB,GAAsB,CAAtB,IAAN,C;MACpB,MAAM,SAAS,MAAT,GAAkB,CAAlB,GAAsB,CAAtB,IAAN,IAAiC,C;;EAEzC,C;mCAEA,iC;IAQsB,Q;IAAA,gBAAS,CAAT,I;IAAlB,aAAU,CAAV,gB;MACI,QAAQ,MAAM,SAAS,CAAT,IAAN,C;MACR,MAAM,SAAS,CAAT,IAAN,IAAoB,MAAM,SAAS,MAAT,GAAkB,CAAlB,GAAsB,CAAtB,IAAN,C;MACpB,MAAM,SAAS,MAAT,GAAkB,CAAlB,GAAsB,CAAtB,IAAN,IAAiC,C;;EAEzC,C;;;;;;;EA7bJ,4B;IAAA,2B;MAAA,U;;IAAA,oB;G;ECDA,mB;IAwLI,+B;IAlKA,4C;IACA,qBAAU,wCAAO,kB;IAEjB,qBAAU,wCAAO,kB;G;;SAFjB,Y;MAAA,yB;K;SAAA,e;MAAA,wB;K;;;SAEA,Y;MAAA,yB;K;SAAA,e;MAAA,wB;K;;yCAcA,a;IACI,IAAM,QAAF,CAAE,CAAN,C;MACI,MAAM,gCAAyB,gBAAzB,C;;EAEd,C;uCA8EA,yB;IAEI,IAA6B,SAAzB,aAAc,WAAW,EAAS,SAAT,CAA7B,C;MAEI,MAAM,gCAAyB,eAAY,aAAZ,eAAzB,C;;IAEV,aAAa,a;EACjB,C;wCAgDA,oB;IAII,WAAW,G;IACX,WAAW,G;EACf,C;EAEA,6B;IAAA,iC;G;oDAEI,uB;IASI,OAAO,kBAAc,WAAd,C;EACX,C;oDAEA,uB;IASI,OAAO,mBAAc,WAAd,C;EACX,C;6CAEA,uB;IAUI,OAAO,yBAAoB,WAApB,C;EACX,C;;;;;;;EArCJ,yC;IAAA,wC;MAAA,uB;;IAAA,iC;G;;;;;;EC5MJ,iB;IAAA,qB;G;sCACI,8C;Ib8qBA,Ua7qBI,Gb6qBJ,Ea7qBiB,Ib6qBjB,Ea7qBuB,Ob6qBvB,Ea7qBgC,Mb6qBhC,Ea7qBwC,SAAS,MAAT,Ib6qBxC,C;Ia7qBI,OAAa,I;G;sCAEjB,8C;IbmmBA,UalmBI,GbkmBJ,EalmBiB,IbkmBjB,EalmBuB,ObkmBvB,EalmBgC,MbkmBhC,EalmBwC,SAAS,MAAT,IbkmBxC,C;IalmBI,OAAa,I;G;sCAEjB,8C;IbwnBA,UavnBI,GbunBJ,EavnBiB,IbunBjB,EavnBuB,ObunBvB,EavnBgC,MbunBhC,EavnBwC,SAAS,MAAT,IbunBxC,C;IavnBI,OAAa,I;G;;;;;;;EARrB,6B;IAAA,4B;MAAA,W;;IAAA,qB;G;EAWA,gC;ILTI,IAAI,CKUK,YLVT,C;MACI,cKSmB,kB;MLRnB,MAAM,sBAAe,OAAf,C;;EKSd,C;ECLA,iB;IAAsB,sB;G;ECRtB,+C;IAEU,IAAkB,I;IAAlB,qBAAkB,OAAlB,MAAa,KAAK,UAAS,OAAT,EAAkB,QAAlB,CAAlB,kC;G;EAEqB,uC;IAAC,Y;G;iDAC5B,Y;IACI,OAAO,OAAG,W;EACd,C;kDAEA,Y;IACI,OAAO,OAAG,Y;EACd,C;gDAEA,Y;IACI,OAAO,OAAG,U;EACd,C;iDAEA,Y;IAEI,YAAgB,OAAG,W;IACnB,OAAO,mBAAmB,KAAM,aAAzB,EAAsC,KAAM,cAA5C,C;EACX,C;kDAEA,Y;IACI,OAAO,OAAG,Y;EACd,C;mDAEA,Y;IACI,OAAO,OAAG,a;EACd,C;gDAEA,Y;EAEA,C;;;;;;EAEJ,kC;IACiC,qCAA0B,SAA1B,C;G;EAEjC,4C;IAII,OAAwC,cAAjC,kBAAW,YAAW,SAAX,CAAsB,C;EAC5C,C;EC1CgC,wC;IAAC,Y;G;;SAEzB,Y;MAAQ,OAAA,OAAG,O;K;;2DAEf,a;IACI,OAAG,WAAU,CAAV,C;EACP,C;4DAEA,a;IACI,OAAG,YAAW,CAAX,C;EACP,C;0DAEA,a;IACI,OAAG,UAAS,CAAT,C;EACP,C;2DAEA,a;IACI,SAAU,C;IACV,OAAG,WAAU,YAAK,UAAS,EAAG,KAAZ,EAAiB,EAAG,MAApB,CAAf,C;EACP,C;4DAEA,a;IACI,OAAG,YAAW,CAAX,C;EACP,C;6DAEA,a;IACI,OAAG,aAAY,CAAZ,C;EACP,C;+CAEA,Y;IACI,OAAG,O;IACH,OAAO,OAAG,W;EACd,C;;;;;;EAEJ,mC;IACkC,sCAA2B,SAA3B,C;G;EAClC,+C;IAII,UAAU,uBAAW,WAAX,C;IACV,MAAU,eAAJ,GAAI,CAAV,C;IACA,OAAkB,cAAX,GAAI,OAAO,C;EACtB,C;+FR3CA,yB;IAAA,mE;IAAA,qC;MACI,IAAI,CAAC,KAAL,C;QACI,cAAc,a;QACd,MAAM,oBAAe,OAAf,C;;IAEd,C;GALA,C;ESDA,kB;G;6BACI,Y;IAAuB,S;G;;;;;;EAG3B,oB;IAAA,wB;IACI,YAA0B,I;G;;;;;;;EAD9B,gC;IAAA,+B;MAAA,c;;IAAA,wB;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}