buildscript {

    dependencies {
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomicfu_version"
//        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_version"
        classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: "$tsgenerator_version"
    }
}

plugins {
    id 'kotlin-multiplatform' version '1.3.31'
}
repositories {
    jcenter()
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}
group 'com.plensee'
//the tdigest-kotlin library version, used also for publishing to npm
version '0.1.0-SNAPSHOT'



apply plugin: 'maven-publish'
apply plugin: 'kotlinx-atomicfu'
apply plugin: 'cz.habarta.typescript-generator'
//apply plugin: 'kotlinx-serialization'


kotlin {
    jvm()
    js()
//    js {
//        compilations.main.kotlinOptions {
//            // Setup the Kotlin compiler options for the 'main' compilation:
//            //see https://kotlinlang.org/docs/reference/js-modules.html
//            //see https://kotlinlang.org/docs/reference/using-gradle.html#attributes-specific-for-js
//            //see https://kotlinlang.org/docs/reference/building-mpp-with-gradle.html#configuring-compilations
//            //define export format used by nodejs
//            moduleKind = "commonjs"
//        }
//    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    //mingwX64("mingw")

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-io:$io_version"
                implementation "org.jetbrains.kotlinx:atomicfu-common:$atomicfu_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "org.jetbrains.kotlinx:kotlinx-io-jvm:$io_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
                compileOnly "org.jetbrains.kotlinx:atomicfu:$atomicfu_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation 'com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.1.11'
                implementation 'com.google.guava:guava:19.0'
                implementation 'org.apache.mahout:mahout-math:0.9'
                implementation 'org.apache.commons:commons-lang3:3.4'
                implementation 'com.clearspring.analytics:stream:2.5.2'
                runtimeOnly "org.jetbrains.kotlinx:atomicfu:$atomicfu_version"
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-io-js:$io_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
                compileOnly "org.jetbrains.kotlinx:atomicfu-js:$atomicfu_version"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
                runtimeOnly "org.jetbrains.kotlinx:atomicfu-js:$atomicfu_version"
            }
        }
        mingwMain {
        }
        mingwTest {
        }
    }
}

// ==== CONFIGURE JS =====
//based on build.gradle for kotlinx.atomicfu

tasks.withType(compileKotlinJs.getClass()) {
    kotlinOptions {
        moduleKind = "commonjs"
        sourceMap = true
        metaInfo = true
    }
}

if (project.extensions.findByName("npmDependencies") == null) {
    project.ext.npmDependencies = []
}

//define npm dependencies when publishing to npm
project.ext.npmDependencies += """ "kotlinx-atomicfu": "${atomicfu_version}" """
project.ext.npmDependencies += """ "kotlinx-io": "${io_version}" """

compileKotlinJs {
    kotlinOptions {
        // NOTE: Module base-name must be equal to the package name declared in package.json
        def baseName = "tdigest-kotlin"
        outputFile = new File(outputFile.parent, baseName + ".js")
    }
}

apply from: file("$rootProject.projectDir/gradle/node-js.gradle")
apply from: file("$rootProject.projectDir/gradle/test-mocha-js.gradle")
apply from: file("$rootProject.projectDir/gradle/publish-npm-js.gradle")

// Workaround the problem with Node downloading
repositories.whenObjectAdded {
    if (it instanceof IvyArtifactRepository) {
        metadataSources {
            artifact()
        }
    }
}

//*DARIO* DEBUG tasks for checking the full list of gradle configurations 
task printConfigs {
    configurations.each { println it.name }
}
//*DARIO* hack for copying jvm class file where a usual kotlin gradle build would put them
task copyToCompileKotlin(type: Copy,dependsOn: [compileKotlinJvm]) {
    from(compileKotlinJvm.destinationDir)
    into file("$buildDir/kotlin/compileKotlin")
}

//run this gradle task for generating typescript interface definition for datamodels classes
generateTypeScript {
    jsonLibrary = 'jackson2'
    classes = [
            'com.tdunning.math.stats.Centroid',
            'com.tdunning.math.stats.ScaleFunction'
    ]
    outputFileType = "implementationFile"
    outputFile = 'npm/tdigest_data_types.ts'
    outputKind = 'module' //see http://www.habarta.cz/typescript-generator/doc/ModulesAndNamespaces.html
}
